{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-laboratory-1.1.4/lib/services/laboratory.service.ts","ng://lamis-laboratory-1.1.4/lib/components/laboratory-details.component.ts","ng://lamis-laboratory-1.1.4/lib/components/laboratory-edit.component.ts","ng://lamis-laboratory-1.1.4/lib/services/laboratory.route.ts","ng://lamis-laboratory-1.1.4/lib/laboratory.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","moment","moment_","LaboratoryService","http","serverUrl","this","resourceUrl","SERVER_API_URL","paramIndex","decorator","prototype","create","laboratory","_this","copy","convertDateFromClient","post","observe","pipe","map","res","convertDateFromServer","update","put","find","id","get","findByUuid","delete","getPatient","dateRegistration","getVisitDatesByPatient","patientId","forEach","laboratoryCategories","getLinesByLaboratory","laboratoryId","labTestsByCategory","getLabTestById","latestVisit","assign","dateResultReceived","isValid","format","DATE_FORMAT","dateAssay","dateSampleCollected","body","convertDateArrayFromServer","HttpClient","Inject","args","SERVER_API_URL_CONFIG","Injectable","providedIn","tslib_1.__param","LaboratoryDetailsComponent","router","route","laboratoryService","cfr","_dialogService","notificationService","updateService","properties","ngOnInit","data","subscribe","_a","entity","snapshot","paramMap","patient","buildProperties","edit","navigate","uuid","openConfirm","title","message","cancelButton","acceptButton","width","afterClosed","accept","ok","showError","CardViewDateItemModel","label","CardViewTextItemModel","labNo","dataSource","previousState","window","history","back","ngOnDestroy","Router","ActivatedRoute","ComponentFactoryResolver","TdDialogService","NotificationService","CardViewUpdateService","Component","selector","template","LaboratoryEditComponent","notification","appLoaderService","activatedRoute","maxNextVisit","add","categories","tests","selectedTests","tomorrow","today","ColumnMode","editing","errors","rows","labTestIds","Set","visitDates","createEntity","isSaving","undefined","facility","minReportedDate","clone","minAssayDate","updateMinDates","labTest","includes","result","filterDates","date","exists","diff","entityCompare","e1","e2","sampleDateChanged","assayDateChanged","rowIndex","save","abort","line","indication","openAlert","disableClose","parseInt","toString","open","lines","subscribeToSaveResponse","categoryChanged","type","testChanged","event","has","filter","row","test","updateValue","cell","console","log","onSaveSuccess","close","onSaveError","onError","showInfo","errorMessage","AppLoaderService","tslib_1.__decorate","ViewChild","MatProgressBar","static","MatButton","LaboratoryResolve","service","resolve","state","params","response","of","ROUTES","path","breadcrumb","children","component","authorities","LaboratoryModule","NgModule","declarations","imports","CommonModule","MatInputModule","MatIconModule","MatCardModule","MatSelectModule","MatButtonModule","RouterModule","forChild","MatProgressBarModule","FormsModule","CovalentMessageModule","CovalentDialogsModule","MatTableModule","MatListModule","CoreModule","NgxDatatableModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport { Laboratory, LaboratoryLine, LabTest, LabTestCategory, Patient } from '../model/laboratory.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Laboratory>;\ntype EntityArrayResponseType = HttpResponse<Laboratory[]>;\n\n@Injectable({providedIn: 'root'})\nexport class LaboratoryService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/laboratories';\n    }\n\n    create(laboratory: Laboratory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(laboratory);\n        return this.http\n            .post<Laboratory>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(laboratory: Laboratory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(laboratory);\n        return this.http\n            .put<Laboratory>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Laboratory>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Laboratory>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null\n                }\n                return res;\n            }))\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/report-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    laboratoryCategories() {\n        return this.http.get<LabTestCategory[]>(`${this.resourceUrl}/test-categories`)\n    }\n\n    getLinesByLaboratory(laboratoryId: number) {\n        return this.http.get<LaboratoryLine[]>(`${this.resourceUrl}/${laboratoryId}/lines`)\n    }\n\n    labTestsByCategory(id: number) {\n        return this.http.get<LabTest[]>(`${this.resourceUrl}/lab-tests/category/${id}`)\n    }\n\n    getLabTestById(id) {\n        return this.http.get<LabTest>(`${this.resourceUrl}/lab-test/${id}`)\n    }\n\n    latestVisit(patientId: number) {\n        return this.http.get<Laboratory>(`${this.resourceUrl}/patient/${patientId}/latest`)\n    }\n\n    protected convertDateFromClient(laboratory: Laboratory): Laboratory {\n        const copy: Laboratory = Object.assign({}, laboratory, {\n            dateResultReceived: laboratory.dateResultReceived != null && laboratory.dateResultReceived.isValid() ? laboratory.dateResultReceived.format(DATE_FORMAT) : null,\n            dateAssay: laboratory.dateAssay != null && laboratory.dateAssay.isValid() ? laboratory.dateAssay.format(DATE_FORMAT) : null,\n            dateSampleCollected: laboratory.dateSampleCollected != null && laboratory.dateSampleCollected.isValid() ? laboratory.dateSampleCollected.format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.dateSampleCollected = res.body.dateSampleCollected != null ? moment(res.body.dateSampleCollected) : null;\n            res.body.dateResultReceived = res.body.dateResultReceived != null ? moment(res.body.dateResultReceived) : null;\n            res.body.dateAssay = res.body.dateAssay != null ? moment(res.body.dateAssay) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((laboratory: Laboratory) => {\n                laboratory.dateResultReceived = laboratory.dateResultReceived != null ? moment(laboratory.dateResultReceived) : null;\n                laboratory.dateAssay = laboratory.dateAssay != null ? moment(laboratory.dateAssay) : null;\n                laboratory.dateSampleCollected = laboratory.dateSampleCollected != null ? moment(laboratory.dateSampleCollected) : null;\n                1\n            });\n        }\n        return res;\n    }\n}\n","import { Component, ComponentFactoryResolver, OnDestroy, OnInit } from '@angular/core';\r\nimport { Laboratory, LaboratoryLine } from '../model/laboratory.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LaboratoryService } from '../services/laboratory.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport {\r\n    CardViewDateItemModel,\r\n    CardViewItem,\r\n    CardViewTextItemModel,\r\n    CardViewUpdateService,\r\n    NotificationService\r\n} from '@alfresco/adf-core';\r\n\r\n@Component({\r\n    selector: 'lamis-laboratory',\r\n    templateUrl: './laboratory-details.component.html'\r\n})\r\nexport class LaboratoryDetailsComponent implements OnInit, OnDestroy {\r\n    properties: CardViewItem[] = [];\r\n    entity: Laboratory;\r\n    public dataSource: LaboratoryLine[];\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private laboratoryService: LaboratoryService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService,\r\n                private updateService: CardViewUpdateService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            const patientId = this.route.snapshot.paramMap.get('patientId');\r\n            this.laboratoryService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\r\n            this.buildProperties();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['/', 'laboratories', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this laboratory request, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.laboratoryService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting visit, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    buildProperties() {\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'sc',\r\n            value: this.entity.dateSampleCollected,\r\n            label: 'Date of Sample Collected',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'ds',\r\n            value: this.entity.dateAssay,\r\n            label: 'Date of Assay',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'na',\r\n            value: this.entity.dateResultReceived,\r\n            label: 'Date Result Received',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'Laboratory Number',\r\n            key: 'fs',\r\n            value: this.entity.labNo\r\n        }));\r\n\r\n        this.laboratoryService.getLinesByLaboratory(this.entity.id)\r\n            .subscribe(res => {\r\n                this.dataSource = res;\r\n            });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Laboratory, LaboratoryLine, LabTest, LabTestCategory, Patient } from '../model/laboratory.model';\r\nimport { LaboratoryService } from '../services/laboratory.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatButton, MatProgressBar } from '@angular/material';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ColumnMode } from '@swimlane/ngx-datatable';\r\nimport * as moment_ from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { AppLoaderService, entityCompare } from '@lamis/web-core';\r\nimport { TdDialogService } from '@covalent/core';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-laboratory-edit',\r\n    templateUrl: './laboratory-edit.component.html'\r\n})\r\nexport class LaboratoryEditComponent implements OnInit {\r\n    @ViewChild(MatProgressBar, {static: true}) progressBar: MatProgressBar;\r\n    @ViewChild(MatButton, {static: true}) submitButton: MatButton;\r\n    entity: Laboratory = {};\r\n    patient: Patient;\r\n    dateRegistration: Moment;\r\n    minAssayDate: Moment;\r\n    minReportedDate: Moment;\r\n    maxNextVisit = moment().add(200, 'days');\r\n    categories: LabTestCategory[] = [];\r\n    tests: LabTest[] = [];\r\n    selectedTests: LabTest[] = [];\r\n    isSaving: boolean;\r\n    error = false;\r\n    tomorrow = moment().add(1, 'days');\r\n    today = moment();\r\n    ColumnMode = ColumnMode;\r\n    editing = {};\r\n    errors = {};\r\n    rows: LaboratoryLine[] = [];\r\n    labTestIds = new Set();\r\n    visitDates: Moment[] = [];\r\n\r\n    constructor(private laboratoryService: LaboratoryService,\r\n                protected notification: NotificationService,\r\n                private appLoaderService: AppLoaderService,\r\n                private _dialogService: TdDialogService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    createEntity(): Laboratory {\r\n        return <Laboratory>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\r\n            this.laboratoryService.getPatient(patientId).subscribe((res) => {\r\n                this.entity.patient = res;\r\n                this.patient = res;\r\n                this.dateRegistration = res.dateRegistration;\r\n                this.entity.facility = res.facility;\r\n                this.laboratoryService.getVisitDatesByPatient(res.id).subscribe((res) => {\r\n                    this.visitDates = res;\r\n                });\r\n                this.minReportedDate = this.entity.patient.dateRegistration.clone().add(0, 'days');\r\n                this.minAssayDate = this.entity.patient.dateRegistration.clone().add(0, 'days');\r\n\r\n                if (this.entity.id) {\r\n                    this.updateMinDates();\r\n                }\r\n            });\r\n\r\n            if (this.entity.id) {\r\n                this.updateMinDates();\r\n                this.laboratoryService.getLinesByLaboratory(this.entity.id)\r\n                    .subscribe((res: LaboratoryLine[]) => {\r\n                        this.rows = res.map(r => {\r\n                            this.laboratoryService.getLabTestById(r.labTest.id).subscribe(res => {\r\n                                if (!this.tests.map(r => r.id).includes(r.labTest.id)) {\r\n                                    this.tests.push(res);\r\n                                    this.selectedTests.push(res);\r\n                                    this.tests = [...this.tests];\r\n                                    this.selectedTests = [...this.selectedTests];\r\n                                }\r\n                                r.result = r.result || '';\r\n                            });\r\n                            return r;\r\n                        });\r\n                    });\r\n            }\r\n\r\n            this.laboratoryService.laboratoryCategories().subscribe(res => this.categories = res);\r\n        });\r\n    }\r\n\r\n    updateMinDates() {\r\n        this.minAssayDate = this.entity.dateSampleCollected.clone().add(0, 'days');\r\n        if (this.entity.dateAssay) {\r\n            this.minReportedDate = this.entity.dateAssay.clone().add(0, 'days');\r\n        } else {\r\n            this.minReportedDate = this.entity.dateSampleCollected.clone().add(1, 'days');\r\n        }\r\n    }\r\n\r\n    filterDates(date: Moment): boolean {\r\n        let exists = false;\r\n\r\n        this.visitDates.forEach(d => {\r\n            if (date.diff(d, 'days') === 0) {\r\n                exists = true;\r\n            }\r\n        });\r\n        return (this.entity.id && date.diff(this.entity.dateSampleCollected, 'days') === 0) || !exists;\r\n    }\r\n\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2)\r\n    }\r\n\r\n    sampleDateChanged(date: Moment) {\r\n        this.minAssayDate = date.clone().add(0, 'days');\r\n    }\r\n\r\n    assayDateChanged(date: Moment) {\r\n        this.minReportedDate = date.clone().add(0, 'days');\r\n    }\r\n\r\n    edit(rowIndex) {\r\n        this.editing[rowIndex + ''] = true;\r\n    }\r\n\r\n    save() {\r\n        this.isSaving = true;\r\n        let abort = false;\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.rows.forEach(line => {\r\n            if (line.labTest.id === 16 && !line.indication) {\r\n                this._dialogService.openAlert({\r\n                    title: 'Indication is required',\r\n                    message: 'Please select indication for Viral Load Test',\r\n                    disableClose: true\r\n                });\r\n                this.isSaving = false;\r\n                abort = true;\r\n            }\r\n            if (line.labTest.id !== 16 && line.indication) {\r\n                line.indication = null\r\n            }\r\n            if (this.entity.dateAssay && !line.result) {\r\n                this._dialogService.openAlert({\r\n                    title: 'Result is required',\r\n                    message: 'Please provide test result',\r\n                    disableClose: true\r\n                });\r\n                this.isSaving = false;\r\n                abort = true;\r\n            }\r\n            if (line.result && !this.entity.dateAssay) {\r\n                this.isSaving = false;\r\n                abort = true;\r\n                this._dialogService.openAlert({\r\n                    title: 'Form not complete',\r\n                    message: 'Please provide Date of Test Assay',\r\n                    disableClose: true\r\n                });\r\n            }\r\n            const result = parseInt(line.result);\r\n            if ((line.labTest.id === 16 || line.labTest.id === 1) && this.entity.dateAssay && result < 0) {\r\n                this._dialogService.openAlert({\r\n                    title: 'Result is invalid',\r\n                    message: 'Please provide numeric value (>=0) result for test',\r\n                    disableClose: true\r\n                });\r\n                this.isSaving = false;\r\n                abort = true;\r\n            } else {\r\n                line.result = result.toString();\r\n            }\r\n        });\r\n\r\n        if (abort) {\r\n            return;\r\n        }\r\n        this.appLoaderService.open('Saving request...');\r\n        this.entity.lines = this.rows;\r\n\r\n        if (this.entity.id !== undefined) {\r\n            this.subscribeToSaveResponse(this.laboratoryService.update(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.laboratoryService.create(this.entity));\r\n        }\r\n    }\r\n\r\n    categoryChanged(type: any) {\r\n        this.laboratoryService.labTestsByCategory(type.id).subscribe((res: LabTest[]) => {\r\n            res.forEach((labTest: LabTest) => {\r\n                if (!this.tests.map(r => r.id).includes(labTest.id)) {\r\n                    this.tests.push(labTest);\r\n                    this.tests = [...this.tests]\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    testChanged(event) {\r\n        this.selectedTests.forEach(labTest => {\r\n            if (!this.labTestIds.has(labTest.id)) {\r\n                this.rows.push({\r\n                    labTest: labTest,\r\n                    result: ''\r\n                });\r\n                this.rows = [...this.rows];\r\n                this.labTestIds.add(labTest.id);\r\n            }\r\n            this.rows = this.rows.filter(row => this.selectedTests.map(test => test.id).includes(row.labTest.id));\r\n            this.labTestIds.forEach(id => {\r\n                if (!this.rows.map(r => r.labTest.id).includes(id)) {\r\n                    this.labTestIds.delete(id);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    updateValue(event, cell, rowIndex) {\r\n        console.log('inline editing rowIndex', rowIndex);\r\n        this.editing[rowIndex + '-' + cell] = false;\r\n        this.rows[rowIndex][cell] = cell === 'indication' ? event : event.target.value;\r\n        this.errors[rowIndex + '-result'] = this.entity.dateAssay && !this.rows[rowIndex][cell];\r\n        this.errors[rowIndex + '-indication'] = this.rows[rowIndex].labTest.id === 16 && !this.rows[rowIndex]['indication'];\r\n        this.rows = [...this.rows];\r\n        console.log('UPDATED!', this.rows[rowIndex][cell]);\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.appLoaderService.close();\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.appLoaderService.close();\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Laboratory request successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        this.notification.showError('Error saving laboratory request');\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.isSaving = false;\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { LaboratoryService } from './laboratory.service';\nimport { Laboratory } from '../model/laboratory.model';\nimport { LaboratoryDetailsComponent } from '../components/laboratory-details.component';\nimport { LaboratoryEditComponent } from '../components/laboratory-edit.component';\n\n@Injectable()\nexport class LaboratoryResolve implements Resolve<Laboratory> {\n    constructor(private service: LaboratoryService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Laboratory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Laboratory>) => response.ok),\n                map((patient: HttpResponse<Laboratory>) => patient.body)\n            );\n        }\n        return of(<Laboratory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Laboratory Request',\n            breadcrumb: 'LABORATORY REQUEST'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: LaboratoryDetailsComponent,\n                resolve: {\n                    entity: LaboratoryResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Laboratory Request',\n                    breadcrumb: 'LABORATORY REQUEST'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: LaboratoryEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'LABORATORY REQUEST',\n                    breadcrumb: 'ADD LABORATORY REQUEST'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: LaboratoryEditComponent,\n                resolve: {\n                    entity: LaboratoryResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Laboratory Request Edit',\n                    breadcrumb: 'LABORATORY REQUEST EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTableModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule } from '@covalent/core';\r\nimport { LaboratoryResolve, ROUTES } from './services/laboratory.route';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatDateFormatModule } from '@lamis/web-core';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { LaboratoryDetailsComponent } from './components/laboratory-details.component';\r\nimport { LaboratoryEditComponent } from './components/laboratory-edit.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LaboratoryDetailsComponent,\r\n        LaboratoryEditComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        FormsModule,\r\n        CovalentMessageModule,\r\n        CovalentDialogsModule,\r\n        MatTableModule,\r\n        MatListModule,\r\n        CoreModule,\r\n        NgxDatatableModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule\r\n    ],\r\n    exports: [\r\n        LaboratoryDetailsComponent,\r\n        LaboratoryEditComponent\r\n    ],\r\n    entryComponents: [],\r\n    providers: [\r\n        LaboratoryResolve\r\n    ]\r\n})\r\nexport class LaboratoryModule {\r\n}\r\n"]}