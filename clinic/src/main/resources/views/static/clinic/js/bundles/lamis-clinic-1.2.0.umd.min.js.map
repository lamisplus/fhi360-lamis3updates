{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-clinic-1.2.0/lib/services/clinic.service.ts","ng://lamis-clinic-1.2.0/lib/components/clinic/clinic-details.component.ts","ng://lamis-clinic-1.2.0/lib/components/clinic/clinic-edit.component.ts","ng://lamis-clinic-1.2.0/lib/services/clinic.route.ts","ng://lamis-clinic-1.2.0/lib/components/clinic/clinic.widget.ts","ng://lamis-clinic-1.2.0/lib/material.module.ts","ng://lamis-clinic-1.2.0/lib/clinic.widget.module.ts","ng://lamis-clinic-1.2.0/lib/clinic.module.ts","ng://lamis-clinic-1.2.0/lib/services/chronic.care.service.ts","ng://lamis-clinic-1.2.0/lib/components/chronic-care/chronic.care.detail.component.ts","ng://lamis-clinic-1.2.0/lib/components/chronic-care/chronic.care.edit.component.ts","ng://lamis-clinic-1.2.0/lib/services/chronic.care.route.ts","ng://lamis-clinic-1.2.0/lib/chronic.care.module.ts","ng://lamis-clinic-1.2.0/lib/services/eac.service.ts","ng://lamis-clinic-1.2.0/lib/components/eac/eac.details.component.ts","ng://lamis-clinic-1.2.0/lib/components/eac/eac.edit.component.ts","ng://lamis-clinic-1.2.0/lib/services/eac.route.ts","ng://lamis-clinic-1.2.0/lib/eac.module.ts","ng://lamis-clinic-1.2.0/lib/services/case-management.service.ts","ng://lamis-clinic-1.2.0/lib/components/case-management/patient.list.component.ts","ng://lamis-clinic-1.2.0/lib/services/case-management.route.ts","ng://lamis-clinic-1.2.0/lib/case-management.module.ts","ng://lamis-clinic-1.2.0/lib/services/case-manager.service.ts","ng://lamis-clinic-1.2.0/lib/components/case-management/case-manager.details.component.ts","ng://lamis-clinic-1.2.0/lib/components/case-management/case-manager.edit.component.ts","ng://lamis-clinic-1.2.0/lib/components/case-management/case-manager.list.component.ts","ng://lamis-clinic-1.2.0/lib/services/case-manager.route.ts","ng://lamis-clinic-1.2.0/lib/case-manager.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","moment","moment_","ClinicService","http","serverUrl","this","resourceUrl","SERVER_API_URL","prototype","create","vm","_this","convertDateFromClient","clinic","oiList","adrList","post","observe","pipe","map","res","convertDateFromServer","update","put","find","id","get","findByUuid","delete","getVisitDatesByPatient","patientId","forEach","getPatient","dateRegistration","dateBirth","getRegimenLines","getRegimenByLine","adverseDrugReactions","opportunisticInfections","adheres","regimes","regimenType","latestVisit","getOpportunisticInfectionsByClinic","clinicId","getAdverseDrugReactionsByClinic","getAdhereByClinic","enrolledOnOTZ","assign","dateVisit","isValid","format","DATE_FORMAT","lmp","nextAppointment","pregnant","pregnancyStatus","breastfeeding","bp","bp1","bp2","body","parts","split","parseInt","convertDateArrayFromServer","HttpClient","Inject","args","SERVER_API_URL_CONFIG","Injectable","providedIn","tslib_1.__param","ClinicDetailsComponent","router","route","clinicService","cfr","_dialogService","notificationService","properties","ngOnInit","data","subscribe","_a","entity","snapshot","paramMap","patient","buildProperties","edit","navigate","uuid","openConfirm","title","message","cancelButton","acceptButton","width","afterClosed","accept","ok","showError","CardViewDateItemModel","label","commence","CardViewIntItemModel","cd4p","CardViewFloatItemModel","CardViewTextItemModel","description","regimen","extra","otz","dateEnrolledOnOTZ","clinicStage","funcStatus","tbStatus","bodyWeight","height","gender","CardViewBoolItemModel","dateLastOTZMeeting","previousState","window","history","back","ngOnDestroy","Router","ActivatedRoute","ComponentFactoryResolver","TdDialogService","NotificationService","Component","selector","template","ClinicEditComponent","notification","activatedRoute","appLoaderService","today","visitDates","selectedClinicAdr","adhereList","ColumnMode","adr","otzApplicable","createEntity","isSaving","regimenLines","undefined","facility","statusAtRegistration","clone","subtract","isBefore","add","isAfter","regimenLineChange","appointmentMin","appointmentMax","ca","adhere","res1","found","cadr","adverseDrugReaction","attendedLastOTZMeeting","caregiverPhone","caregiverAddress","modulesCompleted","co","opportunisticInfection","updateValue","event","cell","row","console","log","severity","filterDates","date","exists","diff","dateChanged","lmpMin","entityCompare","e1","e2","save","filter","open","subscribeToSaveResponse","type","regimens","result","onSaveSuccess","onSaveError","onError","close","showInfo","errorMessage","AppLoaderService","ClinicResolve","service","resolve","state","params","response","of","ROUTES","path","breadcrumb","children","component","authorities","ClinicWidget","tslib_1.__decorate","Input","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatDialogModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatNativeDateModule","MatOptionModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatMenuModule","MatProgressBarModule","MatSidenavModule","MatSnackBarModule","MatToolbarModule","MatTooltipModule","MatDatetimepickerModule","MatNativeDatetimeModule","MaterialModule","NgModule","imports","exports","ClinicWidgetModule","CommonModule","CoreModule","declarations","entryComponents","providers","ClinicModule","RouterModule","forChild","CovalentMessageModule","CovalentDialogsModule","FormsModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","LamisSharedModule","NgxDatatableModule","ChronicCareService","chronicCare","copy","getDmScreens","getTbScreens","getDmScreenByChronicCare","getTbScreenByChronicCare","dateLastCd4","dateLastViralLoad","dateStartedTbTreatment","ChronicCareDetailComponent","chronicCareService","ChronicCareEditComponent","tbs","dms","bmi","bmiCalculated","calculateBmi","Math","pow","toFixed","ChronicCareResolve","ChronicCareModule","MatStepperModule","EacService","eac","getLatestByPatient","getLatestViralLoadByPatient","at","laboratory","dateReported","dateEac1","dateEac2","dateEac3","dateSampleCollected","EacDetailsComponent","eacService","lastViralLoad","notes","EacEditComponent","updateMinDates","repeatVLMin","eac2Min","eac3Min","tap","dateResultReceived","eac1Min","catchError","err","dateEac1Changed","dateEac2Changed","dateEac3Changed","repeatVLMax","openSnackMessage","EacResolve","EacModule","CaseManagementService","initClients","facilityId","getClientList","req","getCaseManagerStats","caseManagerId","getActiveFacility","getCaseManagers","assignToCaseManager","ids","HttpParams","append","toString","deAssignClients","getStates","getLgasByState","PatientListComponent","stompService","caseManagers","patients","globalProperties","stats","globalStats","hospitalNum","totalItems","page","itemsPerPage","loading","initializing","f","updateList","buildStats","states","clearHospitalNum","search","assignClients","patientIds","p","selected","caseManager","selections","loadPage","select","obj","caseManagerChanged","headers","buildGlobalStats","ageGroupChanged","ageLimit","pregnancyStatusChanged","stateChanged","lgas","assigned","val","lgaChanged","lgaId","stable","unstableLessThan1year","unstableMoreThan1Year","preArt","RxStompService","CaseManagementModule","NgbModule","CovalentSearchModule","CaseManagerService","query","options","createRequestOption","CaseManagerDetailsComponent","name","address","phoneNumber","CaseManagerEditComponent","caseManagementService","caseManagerService","CaseManagerListComponent","currentSearch","display","onPageChange","relativeTo","pageInfo","loadAll","keyword","size","sort","onSuccess","CaseManagerResolve","CaseManagerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { map } from 'rxjs/operators';\nimport {\n    Clinic,\n    ClinicAdhere,\n    ClinicAdverseDrugReaction,\n    ClinicOpportunisticInfection,\n    ClinicVm,\n    Patient\n} from '../model/clinic.model';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Clinic>;\ntype EntityArrayResponseType = HttpResponse<Clinic[]>;\n\n@Injectable({providedIn: 'root'})\nexport class ClinicService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/clinics';\n    }\n\n    create(vm: ClinicVm): Observable<EntityResponseType> {\n        vm['clinic'] = this.convertDateFromClient(vm.clinic);\n        vm['oiScreened'] = !!vm.oiList ? 'Yes' : 'No';\n        vm['adrScreened'] = !!vm.adrList ? 'Yes' : 'No';\n        return this.http\n            .post<Clinic>(this.resourceUrl, vm, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(vm: ClinicVm): Observable<EntityResponseType> {\n        vm['clinic'] = this.convertDateFromClient(vm.clinic);\n        vm['oiScreened'] = !!vm.oiList ? 'Yes' : 'No';\n        vm['adrScreened'] = !!vm.adrList ? 'Yes' : 'No';\n        return this.http\n            .put<Clinic>(this.resourceUrl, vm, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<Clinic>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<EntityResponseType> {\n        return this.http\n            .get<Clinic>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getPatient(id: any) {\n        return this.http.get<Patient>(`/api/patients/by-uuid/${id}`, {observe: 'body'})\n            .pipe(map((res) => {\n                if (res) {\n                    res.dateRegistration = res.dateRegistration != null ? moment(res.dateRegistration) : null;\n                    res.dateBirth = res.dateBirth != null ? moment(res.dateBirth) : null;\n                }\n                return res;\n            }))\n    }\n\n    getRegimenLines() {\n        return this.http.get<any[]>(`${this.resourceUrl}/regimen-types`)\n    }\n\n    getRegimenByLine(id) {\n        return this.http.get<any[]>(`${this.resourceUrl}/regimens/regimen-type/${id}`)\n    }\n\n    adverseDrugReactions() {\n        return this.http.get<any[]>(`${this.resourceUrl}/adverse-drug-reactions`)\n    }\n\n    opportunisticInfections() {\n        return this.http.get<any[]>(`${this.resourceUrl}/opportunistic-infections`)\n    }\n\n    adheres() {\n        return this.http.get<any[]>(`${this.resourceUrl}/adheres`)\n    }\n\n    regimes(regimenType: number) {\n        return this.http.get(`${this.resourceUrl}/regimens/${regimenType}`)\n    }\n\n    latestVisit(patientId: number) {\n        return this.http.get<Clinic>(`${this.resourceUrl}/patient/${patientId}/latest`)\n    }\n\n    getOpportunisticInfectionsByClinic(clinicId: number) {\n        return this.http.get<ClinicOpportunisticInfection[]>(`${this.resourceUrl}/${clinicId}/opportunistic-infections`)\n    }\n\n    getAdverseDrugReactionsByClinic(clinicId: number) {\n        return this.http.get<ClinicAdverseDrugReaction[]>(`${this.resourceUrl}/${clinicId}/adverse-drug-reactions`, {observe: 'response'})\n    }\n\n    getAdhereByClinic(clinicId: number) {\n        return this.http.get<ClinicAdhere[]>(`${this.resourceUrl}/${clinicId}/adheres`)\n    }\n\n    enrolledOnOTZ(id: number) {\n        return this.http.get<boolean>(`${this.resourceUrl}/patient/${id}/enrolled-on-otz`)\n    }\n\n    protected convertDateFromClient(clinic: Clinic): Clinic {\n        const copy: Clinic = Object.assign({}, clinic, {\n            dateVisit: clinic.dateVisit != null && clinic.dateVisit.isValid() ? clinic.dateVisit.format(DATE_FORMAT) : null,\n            lmp: clinic.lmp != null && clinic.lmp.isValid() ? clinic.lmp.format(DATE_FORMAT) : null,\n            nextAppointment: clinic.nextAppointment != null && clinic.nextAppointment.isValid() ? clinic.nextAppointment.format(DATE_FORMAT) : null,\n            pregnant: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 2,\n            breastfeeding: clinic.pregnancyStatus != null && clinic.pregnancyStatus === 3,\n            bp: clinic.bp1 > 0 && clinic.bp2 > 0 ? clinic.bp1 + '/' + clinic.bp2 : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.nextAppointment = res.body.nextAppointment != null ? moment(res.body.nextAppointment) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n            res.body.lmp = res.body.lmp != null ? moment(res.body.lmp) : null;\n            res.body.pregnancyStatus = res.body.pregnant ? 2 : res.body.breastfeeding ? 3 : 1;\n            if (res.body.bp) {\n                const parts = res.body.bp.split('/');\n                res.body.bp1 = parseInt(parts[0]);\n                res.body.bp2 = parts.length === 2 ? parseInt(parts[1]) : null;\n            }\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((clinic: Clinic) => {\n                clinic.dateVisit = clinic.dateVisit != null ? moment(clinic.dateVisit) : null;\n                clinic.lmp = clinic.lmp != null ? moment(clinic.lmp) : null;\n                clinic.nextAppointment = clinic.nextAppointment != null ? moment(clinic.nextAppointment) : null;\n                clinic.pregnancyStatus = clinic.pregnant ? 2 : clinic.breastfeeding ? 3 : 1\n            });\n        }\n        return res;\n    }\n}\n","import { Component, ComponentFactoryResolver, OnDestroy, OnInit } from '@angular/core';\r\nimport { Clinic } from '../../model/clinic.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ClinicService } from '../../services/clinic.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport {\r\n    CardViewBoolItemModel,\r\n    CardViewDateItemModel,\r\n    CardViewFloatItemModel,\r\n    CardViewIntItemModel,\r\n    CardViewItem,\r\n    CardViewTextItemModel,\r\n    NotificationService\r\n} from '@alfresco/adf-core';\r\n\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-clinic',\r\n    templateUrl: './clinic-details.component.html'\r\n})\r\nexport class ClinicDetailsComponent implements OnInit, OnDestroy {\r\n    properties: CardViewItem[] = [];\r\n    entity: Clinic;\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private clinicService: ClinicService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            const patientId = this.route.snapshot.paramMap.get(\"patientId\");\r\n            this.clinicService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\r\n            this.buildProperties();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['/', 'clinics', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this clinic visit, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.clinicService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting visit, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    buildProperties() {\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'ds',\r\n            value: this.entity.dateVisit,\r\n            label: this.entity.commence ? 'ART Start Date' : 'Date Visit',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n        if (this.entity.commence) {\r\n            this.properties.push(new CardViewIntItemModel({\r\n                label: 'CD4 at start of ART',\r\n                key: 'cd4',\r\n                value: this.entity.cd4p || null\r\n            }));\r\n            this.properties.push(new CardViewFloatItemModel({\r\n                label: 'CD4%',\r\n                key: 'cd4p',\r\n                value: this.entity.cd4p || null\r\n            }));\r\n            this.properties.push(new CardViewTextItemModel({\r\n                label: 'Original Regimen Line',\r\n                key: 'rl',\r\n                value: this.entity.regimenType != null ? this.entity.regimenType.description : ''\r\n            }));\r\n            this.properties.push(new CardViewTextItemModel({\r\n                label: 'Original Regimen',\r\n                key: 'rl',\r\n                value: this.entity.regimen != null ? this.entity.regimen.description : ''\r\n            }));\r\n        }\r\n        if (this.entity.extra && this.entity.extra.otz && this.entity.extra.otz.enrolledOnOTZ) {\r\n            this.properties.push(new CardViewDateItemModel({\r\n                key: 'ds',\r\n                value: moment(this.entity.extra.dateEnrolledOnOTZ),\r\n                label: 'Date Enrolled on OTZ',\r\n                format: 'dd MMM, yyyy'\r\n            }));\r\n        }\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'Clinical Stage',\r\n            key: 'cs',\r\n            value: this.entity.clinicStage\r\n        }));\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'Functional Status',\r\n            key: 'fs',\r\n            value: this.entity.funcStatus\r\n        }));\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'TB Status',\r\n            key: 'ts',\r\n            value: this.entity.tbStatus\r\n        }));\r\n        this.properties.push(new CardViewFloatItemModel({\r\n            label: 'Body Weight(Kg)',\r\n            key: 'bw',\r\n            value: this.entity.bodyWeight || null\r\n        }));\r\n        this.properties.push(new CardViewFloatItemModel({\r\n            label: 'Height(m)',\r\n            key: 'h',\r\n            value: this.entity.height || null\r\n        }));\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'Blood Pressure',\r\n            key: 'cd4p',\r\n            value: this.entity.bp\r\n        }));\r\n        if (this.entity.patient.gender === 'Female') {\r\n            this.properties.push(new CardViewBoolItemModel({\r\n                label: 'Pregnant',\r\n                key: 'pg',\r\n                value: this.entity.pregnant\r\n            }));\r\n            this.properties.push(new CardViewBoolItemModel({\r\n                label: 'Breastfeeding',\r\n                key: 'bf',\r\n                value: this.entity.breastfeeding\r\n            }));\r\n            this.properties.push(new CardViewDateItemModel({\r\n                key: 'lpm',\r\n                value: this.entity.lmp,\r\n                label: 'LMP',\r\n                format: 'dd MMM, yyyy'\r\n            }));\r\n        }\r\n        this.properties.push(new CardViewTextItemModel({\r\n            label: 'Level of Adherence',\r\n            key: 'ts',\r\n            value: this.entity.tbStatus\r\n        }));\r\n        if (this.entity.extra && this.entity.extra.otz && this.entity.extra.otz.dateLastOTZMeeting) {\r\n            this.properties.push(new CardViewDateItemModel({\r\n                key: 'ds',\r\n                value: moment(this.entity.extra.dateLastOTZMeeting),\r\n                label: 'Date of Last OTZ Meeting',\r\n                format: 'dd MMM, yyyy'\r\n            }));\r\n        }\r\n        this.properties.push(new CardViewDateItemModel({\r\n            key: 'na',\r\n            value: this.entity.nextAppointment,\r\n            label: 'Next Appointment Date',\r\n            format: 'dd MMM, yyyy'\r\n        }));\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n    Adhere,\r\n    AdverseDrugReaction,\r\n    Clinic,\r\n    ClinicAdverseDrugReaction,\r\n    ClinicVm,\r\n    OpportunisticInfection\r\n} from '../../model/clinic.model';\r\nimport { ClinicService } from '../../services/clinic.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { AppLoaderService, DATE_FORMAT, entityCompare } from '@lamis/web-core';\r\nimport { ColumnMode } from '@swimlane/ngx-datatable';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-clinic-edit',\r\n    templateUrl: './clinic-edit.component.html'\r\n})\r\nexport class ClinicEditComponent implements OnInit {\r\n    //@ViewChild(MatProgressBar, {static: true}) progressBar: MatProgressBar;\r\n    //@ViewChild(MatButton, {static: true}) submitButton: MatButton;\r\n    entity: Clinic;\r\n    isSaving: boolean;\r\n    error = false;\r\n    commence: any;\r\n    today = moment();\r\n    lmpMin: Moment;\r\n    appointmentMax: Moment;\r\n    appointmentMin: Moment;\r\n    opportunisticInfections: OpportunisticInfection[];\r\n    adverseDrugReactions: AdverseDrugReaction[];\r\n    adheres: Adhere[];\r\n    regimenLines: any[];\r\n    regimens: any[];\r\n    dateBirth: Moment;\r\n    dateRegistration: Moment;\r\n    visitDates: Moment[] = [];\r\n    selectedClinicAdr: ClinicAdverseDrugReaction[] = [];\r\n    oiList: OpportunisticInfection[] = [];\r\n    adhereList: Adhere[] = [];\r\n    ColumnMode = ColumnMode;\r\n    adr = false;\r\n    enrolledOnOTZ: boolean;\r\n    dateEnrolledOnOTZ: Moment;\r\n    attendedLastOTZMeeting: boolean;\r\n    dateLastOTZMeeting: Moment;\r\n    modulesCompleted: number;\r\n    caregiverPhone: string;\r\n    caregiverAddress: string;\r\n    otzApplicable = false;\r\n\r\n    constructor(private clinicService: ClinicService,\r\n                protected notification: NotificationService,\r\n                protected activatedRoute: ActivatedRoute,\r\n                private appLoaderService: AppLoaderService) {\r\n    }\r\n\r\n    createEntity(): Clinic {\r\n        return <Clinic>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.clinicService.opportunisticInfections().subscribe(res => this.opportunisticInfections = res);\r\n        this.clinicService.adheres().subscribe(res => this.adheres = res);\r\n        this.isSaving = false;\r\n        this.clinicService.getRegimenLines().subscribe(res => {\r\n            this.regimenLines = res;\r\n        });\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.commence = !!this.activatedRoute.snapshot.data['commence'];\r\n\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\r\n\r\n            this.clinicService.getPatient(patientId).subscribe((res) => {\r\n                this.entity.patient = res;\r\n                this.entity.facility = res.facility;\r\n                this.dateBirth = res.dateBirth;\r\n                this.dateRegistration = res.dateRegistration;\r\n\r\n                this.clinicService.enrolledOnOTZ(res.id).subscribe(r => this.enrolledOnOTZ = r);\r\n\r\n                if (this.entity.patient.statusAtRegistration === 'ART_TRANSFER_IN') {\r\n                    this.dateRegistration = this.entity.patient.dateRegistration.clone().subtract(10, 'years');\r\n                    if (this.dateRegistration.isBefore(this.entity.patient.dateBirth)) {\r\n                        this.dateRegistration = this.entity.patient.dateBirth.clone().add(3, 'months');\r\n                    }\r\n                }\r\n\r\n                this.otzApplicable = !moment().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)\r\n                    && !moment().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);\r\n\r\n                this.clinicService.getVisitDatesByPatient(this.entity.patient.id).subscribe((res) => {\r\n                    this.visitDates = res;\r\n                });\r\n            });\r\n            if (this.entity.commence && this.entity.regimenType) {\r\n                this.regimenLineChange(this.entity.regimenType);\r\n            }\r\n            this.commence = this.commence || this.entity.commence;\r\n\r\n            if (this.commence) {\r\n                this.entity.commence = true;\r\n                if (this.entity.regimenType) {\r\n                    this.regimenLineChange(this.entity.regimenType);\r\n                }\r\n            }\r\n\r\n            if (this.entity.id) {\r\n                this.appointmentMin = this.entity.dateVisit.clone().add(14, 'days');\r\n                this.appointmentMax = this.entity.dateVisit.clone().add(6, 'months');\r\n                this.clinicService.getAdhereByClinic(this.entity.id).subscribe((res) => {\r\n                    this.adhereList = res.map(ca => ca.adhere);\r\n                });\r\n                this.clinicService.adverseDrugReactions().subscribe(res1 => {\r\n                    this.adverseDrugReactions = res1;\r\n                    this.clinicService.getAdverseDrugReactionsByClinic(this.entity.id).subscribe(res => {\r\n                        if (res.body && res.body.length > 0) {\r\n                            this.adr = true;\r\n                        }\r\n                        this.adverseDrugReactions.forEach(adr => {\r\n                            let found = false;\r\n                            if (res.body) {\r\n                                res.body.forEach(cadr => {\r\n                                    if (cadr.adverseDrugReaction.id === adr.id) {\r\n                                        found = true;\r\n                                        this.selectedClinicAdr.push(cadr)\r\n                                    }\r\n                                });\r\n                            }\r\n                            if (!found) {\r\n                                this.selectedClinicAdr.push({\r\n                                    adverseDrugReaction: adr\r\n                                })\r\n                            }\r\n                        });\r\n                        this.selectedClinicAdr = [...this.selectedClinicAdr];\r\n                    });\r\n\r\n                    if (this.entity.extra && this.entity.extra.otz) {\r\n                        this.attendedLastOTZMeeting = !!this.entity.extra.otz.attendedLastOTZMeeting;\r\n                        this.enrolledOnOTZ = !!this.entity.extra.otz.enrolledOnOTZ;\r\n                        if (!!this.entity.extra.otz.dateEnrolledOnOTZ) {\r\n                            this.dateEnrolledOnOTZ = moment(this.entity.extra.otz.dateEnrolledOnOTZ);\r\n                        }\r\n\r\n                        if (!!this.entity.extra.otz.dateLastOTZMeeting) {\r\n                            this.dateLastOTZMeeting = moment(this.entity.extra.otz.dateLastOTZMeeting);\r\n                        }\r\n                        this.caregiverPhone = this.entity.extra.otz.caregiverPhone;\r\n                        this.caregiverAddress = this.entity.extra.otz.caregiverAddress;\r\n                        this.modulesCompleted = this.entity.extra.otz.modulesCompleted;\r\n                    }\r\n                });\r\n                this.clinicService.getOpportunisticInfectionsByClinic(this.entity.id).subscribe(res => {\r\n                    this.oiList = res.map(co => co.opportunisticInfection)\r\n                })\r\n            } else {\r\n                this.clinicService.adverseDrugReactions().subscribe(res => {\r\n                    this.adverseDrugReactions = res;\r\n                    this.adverseDrugReactions.forEach(adr => {\r\n                        this.selectedClinicAdr.push({\r\n                            adverseDrugReaction: adr\r\n                        })\r\n                    });\r\n                });\r\n\r\n                this.selectedClinicAdr = [...this.selectedClinicAdr];\r\n            }\r\n        });\r\n    }\r\n\r\n    updateValue(event, cell, row: ClinicAdverseDrugReaction) {\r\n        console.log('Edit', event, cell, row);\r\n        this.selectedClinicAdr = [...this.selectedClinicAdr.map(cadr => {\r\n            if (cadr.adverseDrugReaction.id === row.id) {\r\n                cadr.severity = event;\r\n            }\r\n            return cadr;\r\n        })];\r\n        console.log('UPDATED!', row, event);\r\n    }\r\n\r\n\r\n    filterDates(date: Moment): boolean {\r\n        let exists = false;\r\n\r\n        this.visitDates.forEach(d => {\r\n            if (date.diff(d, 'days') === 0) {\r\n                exists = true;\r\n            }\r\n        });\r\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\r\n    }\r\n\r\n    dateChanged(date: Moment) {\r\n        this.appointmentMax = date.clone().add(6, 'months');\r\n        this.lmpMin = date.clone().subtract(2, 'years');\r\n        this.appointmentMin = date.clone().add(14, 'days');\r\n\r\n        this.otzApplicable = !date.clone().subtract(24, 'years').isAfter(this.entity.patient.dateBirth)\r\n            && !date.clone().subtract(10, 'years').isBefore(this.entity.patient.dateBirth);\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2)\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    save() {\r\n        this.isSaving = true;\r\n        const vm: ClinicVm = {\r\n            clinic: this.entity,\r\n            adrList: this.selectedClinicAdr.filter(cadr => !!cadr.severity),\r\n            oiList: this.oiList,\r\n            adhereList: this.adhereList\r\n        };\r\n        if (!this.entity.extra) {\r\n            this.entity.extra = {};\r\n        }\r\n        this.entity.extra.otz = {};\r\n        if (!this.enrolledOnOTZ) {\r\n            this.entity.extra.otz.dateEnrolledOnOTZ = null;\r\n            this.entity.extra.otz.attendedLastOTZMeeting = null;\r\n            this.entity.extra.otz.dateLastOTZMeeting = null;\r\n            this.entity.extra.otz.enrolledOnOTZ = null;\r\n            this.entity.extra.otz.caregiverPhone = null;\r\n            this.entity.extra.otz.caregiverAddress = null;\r\n            this.entity.extra.otz.modulesCompleted = null;\r\n        } else {\r\n            this.entity.extra.otz.dateEnrolledOnOTZ = this.dateEnrolledOnOTZ != null && this.dateEnrolledOnOTZ.isValid() ?\r\n                this.dateEnrolledOnOTZ.format(DATE_FORMAT) : null;\r\n            this.entity.extra.otz.attendedLastOTZMeeting = !!this.attendedLastOTZMeeting;\r\n            this.entity.extra.otz.dateLastOTZMeeting = this.dateLastOTZMeeting != null && this.dateLastOTZMeeting.isValid() ?\r\n                this.dateLastOTZMeeting.format(DATE_FORMAT) : null;\r\n            this.entity.extra.otz.enrolledOnOTZ = this.enrolledOnOTZ;\r\n            this.entity.extra.otz.caregiverPhone = this.caregiverPhone;\r\n            this.entity.extra.otz.caregiverAddress = this.caregiverAddress;\r\n            this.entity.extra.otz.modulesCompleted = this.modulesCompleted;\r\n        }\r\n        this.appLoaderService.open('Saving clinic visit..');\r\n        if (this.entity.id !== undefined) {\r\n            this.subscribeToSaveResponse(this.clinicService.update(vm));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.clinicService.create(vm));\r\n        }\r\n    }\r\n\r\n    regimenLineChange(type: any) {\r\n        this.clinicService.getRegimenByLine(type.id).subscribe(res => this.regimens = res);\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.appLoaderService.close();\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Clinic visit successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.appLoaderService.close();\r\n        this.error = true;\r\n        //this.submitButton.disabled = true;\r\n        this.notification.showError('Error occurred saving clinic visit; try again');\r\n        //this.progressBar.mode = 'determinate';\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.appLoaderService.close();\r\n        this.notification.showError(errorMessage);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ClinicService } from './clinic.service';\nimport { Clinic } from '../model/clinic.model';\nimport { ClinicDetailsComponent } from '../components/clinic/clinic-details.component';\nimport { ClinicEditComponent } from '../components/clinic/clinic-edit.component';\n\n@Injectable()\nexport class ClinicResolve implements Resolve<Clinic> {\n    constructor(private service: ClinicService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Clinic> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Clinic>) => response.ok),\n                map((patient: HttpResponse<Clinic>) => patient.body)\n            );\n        }\n        return of(<Clinic>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: ClinicDetailsComponent,\n                resolve: {\n                    entity: ClinicResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Clinic Visit',\n                    breadcrumb: 'CLINIC VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: ClinicEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Clinic Visit',\n                    breadcrumb: 'ADD CLINIC VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'art-commencement/patient/:patientId/new',\n                component: ClinicEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'ART Commencement',\n                    breadcrumb: 'ADD ART COMMENCEMENT',\n                    commence: true\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClinicEditComponent,\n                resolve: {\n                    entity: ClinicResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Clinic Visit Edit',\n                    breadcrumb: 'CLINIC VISIT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ClinicService } from '../../services/clinic.service';\nimport { Clinic } from '../../model/clinic.model';\nimport { CardViewDateItemModel, CardViewFloatItemModel, CardViewItem, CardViewTextItemModel } from \"@alfresco/adf-core\";\n\n@Component({\n    selector: 'clinic-widget',\n    templateUrl: './clinic.widget.html'\n})\nexport class ClinicWidget implements OnInit {\n    @Input()\n    patientId: number;\n    clinic: Clinic;\n    properties: CardViewItem[] = [];\n\n    constructor(private clinicService: ClinicService) {\n    }\n\n    ngOnInit(): void {\n        this.clinicService.latestVisit(this.patientId).subscribe((res) => {\n            this.clinic = res;\n            this.buildProperties()\n        })\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'dv',\n            value: this.clinic.dateVisit,\n            label: 'Last Clinic Visit',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'nv',\n            value: this.clinic.nextAppointment,\n            label: 'Next Clinic Visit',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Functional Status',\n            key: 'fs',\n            value: this.clinic.funcStatus\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Clinical Stage',\n            key: 'cs',\n            value: this.clinic.clinicStage\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'TB Status',\n            key: 'ts',\n            value: this.clinic.tbStatus\n        }));\n        this.properties.push(new CardViewFloatItemModel({\n            label: 'Body Weight(Kg)',\n            key: 'bw',\n            value: this.clinic.bodyWeight\n        }));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatDatetimepickerModule, MatNativeDatetimeModule } from '@mat-datetimepicker/core';\n\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n        MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n        MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n        MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n        MatMenuModule, MatProgressBarModule, MatSidenavModule, MatSnackBarModule, MatToolbarModule,\n        MatTooltipModule, MatDatetimepickerModule, MatNativeDatetimeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","import { NgModule } from '@angular/core';\nimport { ClinicWidget } from './components/clinic/clinic.widget';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n    imports:[\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations:[\n      ClinicWidget  \n    ],\n    entryComponents: [\n        ClinicWidget\n    ],\n    exports: [\n        ClinicWidget\n    ],\n    providers: [\n    ]\n})\nexport class ClinicWidgetModule {\n    \n}\n","import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule } from '@covalent/core';\r\nimport { ClinicDetailsComponent } from './components/clinic/clinic-details.component';\r\nimport { ClinicEditComponent } from './components/clinic/clinic-edit.component';\r\nimport { ClinicResolve, ROUTES } from './services/clinic.route';\r\nimport { ClinicWidgetModule } from './clinic.widget.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ClinicDetailsComponent,\r\n        ClinicEditComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        CovalentMessageModule,\r\n        CovalentDialogsModule,\r\n        MatListModule,\r\n        CoreModule,\r\n        ClinicWidgetModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule,\r\n        LamisSharedModule,\r\n        NgxDatatableModule,\r\n    ],\r\n    exports: [\r\n        ClinicDetailsComponent,\r\n        ClinicEditComponent\r\n    ],\r\n    entryComponents: [\r\n    ],\r\n    providers: [\r\n        ClinicResolve\r\n    ]\r\n})\r\nexport class ClinicModule {\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { ChronicCare, ChronicCareVm } from '../model/clinic.model';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = moment_;\n\n@Injectable({providedIn: 'root'})\nexport class ChronicCareService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/chronic-cares';\n    }\n\n    create(chronicCare: ChronicCareVm): Observable<HttpResponse<ChronicCare>> {\n        const copy = this.convertDateFromClient(chronicCare);\n        return this.http\n            .post<ChronicCare>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    update(chronicCare: ChronicCareVm): Observable<HttpResponse<ChronicCare>> {\n        const copy = this.convertDateFromClient(chronicCare);\n        return this.http\n            .put<ChronicCare>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<HttpResponse<ChronicCare>> {\n        return this.http\n            .get<ChronicCare>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<ChronicCare>> {\n        return this.http\n            .get<ChronicCare>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<ChronicCare>) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getDmScreens() {\n        return this.http.get(`${this.resourceUrl}/dm-screens`)\n    }\n\n    getTbScreens() {\n        return this.http.get(`${this.resourceUrl}/tb-screens`)\n    }\n\n    getDmScreenByChronicCare(id: number) {\n        return this.http.get(`${this.resourceUrl}/${id}/dm-screens`)\n    }\n\n    getTbScreenByChronicCare(id: number) {\n        return this.http.get(`${this.resourceUrl}/${id}/tb-screens`)\n    }\n\n    getVisitDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`${this.resourceUrl}/patient/${patientId}/visit-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    protected convertDateFromServer(res: HttpResponse<ChronicCare>): HttpResponse<ChronicCare> {\n        if (res.body) {\n            res.body.dateLastCd4 = res.body.dateLastCd4 != null ? moment(res.body.dateLastCd4) : null;\n            res.body.dateVisit = res.body.dateVisit != null ? moment(res.body.dateVisit) : null;\n            res.body.dateLastViralLoad = res.body.dateLastViralLoad != null ? moment(res.body.dateLastViralLoad) : null;\n            res.body.dateStartedTbTreatment = res.body.dateStartedTbTreatment != null ? moment(res.body.dateStartedTbTreatment) : null;\n        }\n        return res;\n    }\n\n    protected convertDateFromClient(vm: ChronicCareVm): ChronicCareVm {\n        vm.chronicCare = Object.assign({}, vm.chronicCare, {\n            dateLastViralLoad: vm.chronicCare.dateLastViralLoad != null && vm.chronicCare.dateLastViralLoad.isValid() ?\n                vm.chronicCare.dateLastViralLoad.format(DATE_FORMAT) : null,\n            dateVisit: vm.chronicCare.dateVisit != null && vm.chronicCare.dateVisit.isValid() ?\n                vm.chronicCare.dateVisit.format(DATE_FORMAT) : null,\n            dateLastCd4: vm.chronicCare.dateLastCd4 != null && vm.chronicCare.dateLastCd4.isValid() ?\n                vm.chronicCare.dateLastCd4.format(DATE_FORMAT) : null,\n            dateStartedTbTreatment: vm.chronicCare.dateStartedTbTreatment != null &&\n            vm.chronicCare.dateStartedTbTreatment.isValid() ? vm.chronicCare.dateStartedTbTreatment.format(DATE_FORMAT) : null\n        });\n        return vm;\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ClinicService } from '../../services/clinic.service';\nimport { CardViewItem, NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ChronicCare } from '../../model/clinic.model';\nimport { TdDialogService } from '@covalent/core';\nimport { ChronicCareService } from '../../services/chronic.care.service';\n\n@Component({\n    selector: 'chronic-care-detail',\n    templateUrl: './chronic.care.detail.component.html'\n})\nexport class ChronicCareDetailComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: ChronicCare;\n\n    constructor(private router: Router, private route: ActivatedRoute, private chronicCareService: ChronicCareService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService,\n                private clinicService: ClinicService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            const patientId = this.route.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => this.entity.patient = res);\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'chronic-cares', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this chronic care visit, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.chronicCareService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients'])\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n\n    }\n\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ChronicCare, ChronicCareDm, ChronicCareTB, Patient } from '../../model/clinic.model';\nimport { ClinicService } from '../../services/clinic.service';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ChronicCareService } from '../../services/chronic.care.service';\nimport { Observable } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { AppLoaderService } from '@lamis/web-core';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'chronic-care-edit',\n    templateUrl: './chronic.care.edit.component.html'\n})\nexport class ChronicCareEditComponent implements OnInit {\n    entity: ChronicCare;\n    patient: Patient;\n    today = moment();\n    tbs: ChronicCareTB[] = [];\n    dms: ChronicCareDm[] = [];\n    visitDates: Moment[] = [];\n    isSaving: boolean = false;\n    bmi: string = '';\n    bmiCalculated: string = '';\n\n    constructor(private clinicService: ClinicService,\n                private chronicCareService: ChronicCareService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): ChronicCare {\n        return <ChronicCare>{};\n    }\n\n    ngOnInit(): void {\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.entity.facility = res.facility;\n                this.chronicCareService.getVisitDatesByPatient(this.entity.patient.id).subscribe((res) => {\n                    this.visitDates = res;\n                });\n            });\n\n            this.calculateBmi();\n        });\n\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.visitDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateVisit, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    calculateBmi() {\n        if (this.entity.bodyWeight && this.entity.height) {\n            const bmi = this.entity.bodyWeight / Math.pow(this.entity.height, 2);\n            if (bmi < 18.5) {\n                this.bmi = '<18.5 (Underweight)';\n            } else if (bmi < 24.9) {\n                this.bmi = '18.5 - 24.9 (Healthy)';\n            } else if (bmi < 29.9) {\n                this.bmi = '25.0 - 29.9 (Overweight)';\n            } else if (bmi < 40) {\n                this.bmi = '30 - 40 (Obesity)';\n            } else {\n                this.bmi = '>40 (Morbid Obesity)';\n            }\n            this.bmiCalculated = bmi.toFixed(1);\n        } else {\n            this.bmi = '';\n        }\n    }\n\n    save() {\n        //this.submitButton.disabled = true;\n        //this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        this.appLoaderService.open('Saving chronic care visit..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.chronicCareService.update({\n                chronicCare: this.entity,\n                tbs: this.tbs,\n                dms: this.dms\n            }));\n        } else {\n            this.subscribeToSaveResponse(this.chronicCareService.create({\n                chronicCare: this.entity,\n                tbs: this.tbs,\n                dms: this.dms\n            }));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Chronic Care visit successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving chronic care visit; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ChronicCare } from '../model/clinic.model';\nimport { ChronicCareService } from './chronic.care.service';\nimport { ChronicCareEditComponent } from '../components/chronic-care/chronic.care.edit.component';\nimport { ChronicCareDetailComponent } from '../components/chronic-care/chronic.care.detail.component';\n\n@Injectable()\nexport class ChronicCareResolve implements Resolve<ChronicCare> {\n    constructor(private service: ChronicCareService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ChronicCare> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<ChronicCare>) => response.ok),\n                map((patient: HttpResponse<ChronicCare>) => patient.body)\n            );\n        }\n        return of(<ChronicCare>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Chronic Care Visit',\n            breadcrumb: 'CHRONIC CARE VISIT'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: ChronicCareDetailComponent,\n                resolve: {\n                    entity: ChronicCareResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Chronic Care Visit',\n                    breadcrumb: 'CHRONIC CARE VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: ChronicCareEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Chronic Care Visit',\n                    breadcrumb: 'ADD CHRONIC CARE VISIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ChronicCareEditComponent,\n                resolve: {\n                    entity: ChronicCareResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Chronic Care Visit Edit',\n                    breadcrumb: 'CHRONIC CARE VISIT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { NgModule } from '@angular/core';\nimport { ChronicCareDetailComponent } from './components/chronic-care/chronic.care.detail.component';\nimport { ChronicCareEditComponent } from './components/chronic-care/chronic.care.edit.component';\nimport { ChronicCareResolve } from './services/chronic.care.route';\nimport { MaterialModule } from './material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CustomFormsModule } from 'ng2-validation';\nimport { CommonModule } from '@angular/common';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES } from './services/chronic.care.route';\nimport { MatStepperModule } from \"@angular/material\";\n\n@NgModule({\n    declarations: [\n        ChronicCareDetailComponent,\n        ChronicCareEditComponent\n    ],\n    imports: [\n        CommonModule,\n        CovalentDialogsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        LamisSharedModule,\n        MaterialModule,\n        CoreModule,\n        CustomFormsModule,\n        MatDateFormatModule,\n        RouterModule.forChild(ROUTES),\n        MatStepperModule\n    ],\n    providers: [\n        ChronicCareResolve\n    ]\n})\nexport class ChronicCareModule {\n    \n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { DATE_FORMAT, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { EAC } from '../model/clinic.model';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\n\nconst moment = moment_;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EacService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/eacs';\n    }\n\n    create(eac: EAC): Observable<HttpResponse<EAC>> {\n        const copy = this.convertDateFromClient(eac);\n        return this.http\n            .post<EAC>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    update(eac: EAC): Observable<HttpResponse<EAC>> {\n        const copy = this.convertDateFromClient(eac);\n        return this.http\n            .put<EAC>(this.resourceUrl, copy, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getLatestByPatient(uuid: string): Observable<HttpResponse<EAC>> {\n        return this.http\n            .get<EAC>(`${this.resourceUrl}/patient/${uuid}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<EAC>) => this.convertDateFromServer(res)));\n    }\n\n    getLatestViralLoadByPatient(id: number, at: Moment): Observable<HttpResponse<any>> {\n        const  date = at.format(DATE_FORMAT);\n        return this.http\n            .get<any>(`${this.resourceUrl}/patient/${id}/viral-load-result/at/${date}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<any>) => {\n                if (res.body) {\n                    res.body.laboratory.dateReported = res.body.laboratory.dateReported != null ?\n                        moment(res.body.laboratory.dateReported) : null\n                }\n                return res;\n            }));\n    }\n\n    protected convertDateFromClient(eac: EAC): EAC {\n        const copy: EAC = Object.assign({}, eac, {\n            dateEac1: eac.dateEac1 != null && eac.dateEac1.isValid() ? eac.dateEac1.format(DATE_FORMAT) : null,\n            dateEac2: eac.dateEac2 != null && eac.dateEac2.isValid() ? eac.dateEac2.format(DATE_FORMAT) : null,\n            dateEac3: eac.dateEac3 != null && eac.dateEac3.isValid() ? eac.dateEac3.format(DATE_FORMAT) : null,\n            dateSampleCollected: eac.dateSampleCollected != null && eac.dateSampleCollected.isValid() ? eac.dateSampleCollected.format(DATE_FORMAT) : null,\n            dateLastViralLoad: eac.dateLastViralLoad != null && eac.dateLastViralLoad.isValid() ? eac.dateLastViralLoad.format(DATE_FORMAT) : null,\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: HttpResponse<EAC>): HttpResponse<EAC> {\n        if (res.body) {\n            res.body.dateLastViralLoad = res.body.dateLastViralLoad != null ? moment(res.body.dateLastViralLoad) : null;\n            res.body.dateEac1 = res.body.dateEac1 != null ? moment(res.body.dateEac1) : null;\n            res.body.dateEac2 = res.body.dateEac2 != null ? moment(res.body.dateEac2) : null;\n            res.body.dateEac3 = res.body.dateEac3 != null ? moment(res.body.dateEac3) : null;\n            res.body.dateSampleCollected = res.body.dateSampleCollected != null ? moment(res.body.dateSampleCollected) : null;\n        }\n        return res;\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { EAC } from '../../model/clinic.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { CardViewDateItemModel, CardViewItem, CardViewTextItemModel, NotificationService } from '@alfresco/adf-core';\nimport { EacService } from '../../services/eac.service';\n\n@Component({\n    selector: 'eac-details',\n    templateUrl: './eac.details.component.html'\n})\nexport class EacDetailsComponent implements OnInit {\n    properties: CardViewItem[] = [];\n    entity: EAC;\n\n    constructor(private router: Router, private route: ActivatedRoute,\n                private _dialogService: TdDialogService, private notificationService: NotificationService,\n                private eacService: EacService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'eacs', this.entity.uuid, 'patient', this.entity.patient.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this EAC Record, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.eacService.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['patients'])\n                    } else {\n                        this.notificationService.showError('Error deleting visit, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateLastViralLoad,\n            label: 'Date Last Viral Load',\n            format: 'dd MMM, yyyy'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            key: 'vl',\n            value: this.entity.lastViralLoad,\n            label: 'Last Viral Load'\n        }));\n        this.properties.push(new CardViewDateItemModel({\n            key: 'ds',\n            value: this.entity.dateEac1,\n            label: 'Date of 1st EAC Session',\n            format: 'dd MMM, yyyy'\n        }));\n        if (this.entity.dateEac2) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateEac2,\n                label: 'Date of 2nd EAC Session',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        if (this.entity.dateEac3) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateEac3,\n                label: 'Date of 3rd EAC Session',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        if (this.entity.dateEac3) {\n            this.properties.push(new CardViewDateItemModel({\n                key: 'ds',\n                value: this.entity.dateSampleCollected,\n                label: 'Date of Repeat VL Sample Collection',\n                format: 'dd MMM, yyyy'\n            }));\n        }\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Notes',\n            key: 'ts',\n            value: this.entity.notes\n        }));\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Observable } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { ClinicService } from '../../services/clinic.service';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { EAC, Patient } from '../../model/clinic.model';\nimport { EacService } from '../../services/eac.service';\nimport { catchError, tap } from 'rxjs/operators';\n\nconst moment = moment_;\n\n\n@Component({\n    selector: 'eac-edit',\n    templateUrl: './eac.edit.component.html'\n})\nexport class EacEditComponent implements OnInit {\n    entity: EAC;\n    patient: Patient;\n    today = moment();\n    dateRegistration: Moment;\n    eac1Min: Moment;\n    eac2Min: Moment;\n    eac3Min: Moment;\n    repeatVLMin: Moment;\n    repeatVLMax: Moment;\n    isSaving: boolean = false;\n\n    constructor(private clinicService: ClinicService,\n                private eacService: EacService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): EAC {\n        return <EAC>{};\n    }\n\n    ngOnInit(): void {\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.clinicService.getPatient(patientId).subscribe((res) => {\n                this.entity.patient = res;\n                this.entity.facility = res.facility;\n                this.dateRegistration = res.dateRegistration;\n                this.updateMinDates(res.id, moment());\n                if (!this.entity.id) {\n                    this.eacService.getLatestByPatient(res.uuid).subscribe(r => {\n                        this.entity = r.ok ? r.body : this.createEntity();\n                        this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                            this.entity.dateLastViralLoad;\n                        this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                            this.entity.dateLastViralLoad;\n                        this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                            this.entity.dateLastViralLoad;\n                    });\n                }\n            });\n\n        });\n    }\n\n    updateMinDates(id: number, date: Moment) {\n        this.eacService.getLatestViralLoadByPatient(id, date).pipe(tap((r: any) => {\n                this.entity.dateLastViralLoad = moment(r.laboratory.dateResultReceived);\n                this.entity.lastViralLoad = r.result;\n                this.eac1Min = this.entity.dateLastViralLoad.clone().add(1, 'day');\n                this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                    this.entity.dateLastViralLoad;\n            }),\n            catchError((err: any) => {\n                this.entity.dateLastViralLoad = null;\n                this.entity.lastViralLoad = null;\n                this.eac1Min = this.entity.patient.dateRegistration.clone().add(1, 'day');\n                this.eac2Min = this.entity.dateEac1 ? this.entity.dateEac1.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.eac3Min = this.entity.dateEac2 ? this.entity.dateEac2.clone().add(2, 'week') :\n                    this.entity.dateLastViralLoad;\n                this.repeatVLMin = this.entity.dateEac3 ? this.entity.dateEac3.clone().add(1, 'day') :\n                    this.entity.dateLastViralLoad;\n                return null;\n            }));\n    }\n\n    dateEac1Changed(date: Moment) {\n        this.eac2Min = date.clone().add(2, 'weeks');\n        this.updateMinDates(this.entity.patient.id, date);\n    }\n\n    dateEac2Changed(date: Moment) {\n        this.eac3Min = date.clone().add(2, 'weeks')\n    }\n\n    dateEac3Changed(date: Moment) {\n        this.repeatVLMin = date.clone().add(1, 'days');\n        this.repeatVLMax = date.clone().add(6, 'months');\n    }\n\n    save() {\n        //this.submitButton.disabled = true;\n        //this.progressBar.mode = 'indeterminate';\n        this.isSaving = true;\n        this.appLoaderService.open('Saving EAC session..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.eacService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.eacService.create(this.entity));\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('EAC session successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving EAC session; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { EAC } from '../model/clinic.model';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\nimport { EacService } from './eac.service';\nimport { EacEditComponent } from '../components/eac/eac.edit.component';\nimport { EacDetailsComponent } from '../components/eac/eac.details.component';\n\n@Injectable()\nexport class EacResolve implements Resolve<EAC> {\n    constructor(private service: EacService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<EAC> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<EAC>) => response.ok),\n                map((patient: HttpResponse<EAC>) => patient.body)\n            );\n        }\n        return of(<EAC>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'EAC Session',\n            breadcrumb: 'EAC SESSION'\n        },\n        children: [\n            {\n                path: ':id/patient/:patientId/view',\n                component: EacDetailsComponent,\n                resolve: {\n                    entity: EacResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'EAC Session',\n                    breadcrumb: 'EAC SESSION'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'patient/:patientId/new',\n                component: EacEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'EAC Session',\n                    breadcrumb: 'ADD EAC SESSION',\n                    commence: true\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: EacEditComponent,\n                resolve: {\n                    entity: EacResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'EAC Session Edit',\n                    breadcrumb: 'EAC SESSION EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n","import { NgModule } from '@angular/core';\nimport { EacDetailsComponent } from './components/eac/eac.details.component';\nimport { EacEditComponent } from './components/eac/eac.edit.component';\nimport { EacResolve, ROUTES } from './services/eac.route';\nimport { CommonModule } from '@angular/common';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { MaterialModule } from './material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CustomFormsModule } from 'ng2-validation';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        CovalentDialogsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        LamisSharedModule,\n        MaterialModule,\n        CoreModule,\n        CustomFormsModule,\n        MatDateFormatModule,\n        RouterModule.forChild(ROUTES)\n    ],\n    declarations: [\n        EacDetailsComponent,\n        EacEditComponent\n    ],\n    providers: [\n        EacResolve\n    ]\n})\nexport class EacModule {\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { Facility } from '../model/facility.model';\nimport { CaseManager, CaseManagerStats, Patient } from '../model/case-management.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CaseManagementService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/case-management';\n    }\n\n    initClients(facilityId: number) {\n        return this.http.get(`${this.resourceUrl}/init-clients/${facilityId}`)\n    }\n\n    getClientList(req: any) {\n        return this.http.post<Patient[]>(`${this.resourceUrl}/client-list`, req, {observe: 'response'})\n    }\n\n    getCaseManagerStats(caseManagerId: number, facilityId: number) {\n        return this.http.get<CaseManagerStats>(`${this.resourceUrl}/facility/${facilityId}/case-manager/${caseManagerId}/stats`)\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getCaseManagers(facilityId: number) {\n        return this.http.get<CaseManager[]>(`${this.resourceUrl}/facility/${facilityId}/case-managers`)\n    }\n\n    assignToCaseManager(caseManagerId: number, ids: number[]) {\n        let params = new HttpParams();\n        ids.forEach(id => params = params.append(\"ids\", id.toString()));\n        return this.http.get(`${this.resourceUrl}/case-manager/${caseManagerId}/assign-clients`, {\n            params,\n            observe: 'response'\n        })\n    }\n\n    deAssignClients(ids: number[]) {\n        let params = new HttpParams();\n        ids.forEach(id => params = params.append(\"ids\", id.toString()));\n        return this.http.get(`${this.resourceUrl}/de-assign-clients`, {\n            params,\n            observe: 'response'\n        })\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CaseManager, CaseManagerStats, Patient } from '../../model/case-management.model';\nimport { CaseManagementService } from '../../services/case-management.service';\nimport { CardViewIntItemModel, CardViewItem, NotificationService } from '@alfresco/adf-core';\nimport { TdDialogService } from '@covalent/core';\nimport { Subscription } from 'rxjs';\nimport { RxStompService } from '@stomp/ng2-stompjs';\nimport { Message } from \"@stomp/stompjs\";\n\nexport interface Filter {\n    upperAgeLimit?: number;\n    lowerAgeLimit?: number;\n    pregnant?: boolean;\n    breastfeeding?: boolean;\n    lgaId?: number;\n    facilityId?: number;\n    status?: string;\n    gender?: string;\n    hospitalNum?: string;\n    page?: number;\n    size?: number;\n    assigned?: boolean;\n}\n\n@Component({\n    selector: 'case-management-patient-list',\n    templateUrl: './patient.list.component.html'\n})\nexport class PatientListComponent implements OnInit, OnDestroy {\n    caseManagers: CaseManager[] = [];\n    caseManager: CaseManager;\n    patients: Patient[] = [];\n    properties: Array<CardViewItem> = [];\n    globalProperties: Array<CardViewItem> = [];\n    stats: CaseManagerStats = {};\n    globalStats: CaseManagerStats = {};\n    facilityId: number;\n    filter: Filter = {};\n    ageLimit: number;\n    pregnancyStatus: number;\n    states: any[];\n    lgas: any[];\n    hospitalNum: string = '';\n    totalItems = 0;\n    page = 0;\n    itemsPerPage = 20;\n    loading = true;\n    initializing = true;\n    private topicSubscription: Subscription;\n\n    constructor(private service: CaseManagementService, private _dialogService: TdDialogService,\n                private notificationService: NotificationService, private stompService: RxStompService) {\n    }\n\n    ngOnInit(): void {\n        /*this.topicSubscription = this.stompService.watch('/topic/case-management').subscribe((msg: Message) => {\n            console.log('Simp Message', msg);\n            if(msg.body === 'finished'){\n                this.initializing = false;\n            }\n        });*/\n\n        this.service.getActiveFacility().subscribe((f) => {\n            if (f) {\n                this.facilityId = f.id;\n                this.service.initClients(f.id).subscribe((r) => {\n                    this.initializing = false;\n                    this.service.getCaseManagers(f.id).subscribe(res => {\n                        this.caseManagers = res;\n                        this.updateList()\n                    });\n                });\n\n                this.service.getCaseManagerStats(0, f.id).subscribe(res => {\n                    this.stats = res;\n                    this.buildStats();\n                })\n            }\n        });\n        this.service.getStates().subscribe(res => this.states = res)\n    }\n\n    ngOnDestroy(): void {\n        //this.topicSubscription.unsubscribe();\n    }\n\n    clearHospitalNum() {\n        this.hospitalNum = null;\n        this.filter['hospitalNum'] = null;\n        this.page = 0;\n    }\n\n    search() {\n        this.page = 0;\n        this.updateList();\n    }\n\n    assignClients() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to assign selected clients to the selected Case Manager?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                const patientIds = this.patients.filter(p => p.selected)\n                    .map(p => p.id);\n                this.service.assignToCaseManager(this.caseManager.id, patientIds).subscribe((res) => {\n                    if (res.ok) {\n                        this.updateList();\n                        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res => {\n                            this.stats = res;\n                            this.buildStats();\n                        })\n                    } else {\n                        this.notificationService.showError('Error assigning clients, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    deAssignClients() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to de-assign selected clients?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                const patientIds = this.patients.filter(p => p.selected)\n                    .map(p => p.id);\n                this.service.deAssignClients(patientIds).subscribe((res) => {\n                    if (res.ok) {\n                        this.updateList();\n                        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res => {\n                            this.stats = res;\n                            this.buildStats();\n                        })\n                    } else {\n                        this.notificationService.showError('Error de-assigning clients, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    selections(): boolean {\n        return this.patients && !!this.patients.find(p => p.selected)\n    }\n\n    loadPage(page) {\n        this.page = page;\n        this.updateList()\n    }\n\n    select(event) {\n        this.patients = this.patients.map(p => {\n            if (p.id === event.obj.id) {\n                p.selected = !p.selected;\n            }\n            return p;\n        });\n    }\n\n    caseManagerChanged() {\n        if (!this.caseManager) {\n            this.stats = null\n        }\n        this.service.getCaseManagerStats(this.caseManager.id, this.facilityId).subscribe(res => {\n            this.stats = res;\n            this.buildStats();\n        })\n    }\n\n    updateList() {\n        if (this.hospitalNum) {\n            this.filter.hospitalNum = this.hospitalNum;\n        }\n        this.filter['facilityId'] = this.facilityId;\n        this.filter['size'] = this.itemsPerPage;\n        this.filter['page'] = this.page > 0 ? this.page - 1 : 0;\n        this.loading = true;\n        this.service.getClientList(this.filter).subscribe(res => {\n            if (res.body) {\n                this.patients = res.body.map(p => {\n                    const caseManager = this.caseManagers.find(c => c.id === p.caseManagerId);\n                    if (caseManager) {\n                        p.caseManager = caseManager;\n                    }\n                    return p;\n                });\n                this.totalItems = (<any>res.headers).get('X-Total-Count');\n                this.service.getCaseManagerStats(0, this.facilityId).subscribe(res => {\n                    this.globalStats = res;\n                    this.buildGlobalStats();\n                });\n            }\n            this.loading = false;\n        })\n    }\n\n    ageGroupChanged() {\n        if (this.ageLimit == 9) {\n            this.filter['lowerAgeLimit'] = 0;\n            this.filter['upperAgeLimit'] = 9;\n        } else if (this.ageLimit == 14) {\n            this.filter['lowerAgeLimit'] = 10;\n            this.filter['upperAgeLimit'] = 14;\n        } else if (this.ageLimit == 19) {\n            this.filter['lowerAgeLimit'] = 15;\n            this.filter['upperAgeLimit'] = 19;\n        } else if (this.ageLimit == 24) {\n            this.filter['lowerAgeLimit'] = 20;\n            this.filter['upperAgeLimit'] = 24;\n        } else if (this.ageLimit == 100) {\n            this.filter['lowerAgeLimit'] = 25;\n            this.filter['upperAgeLimit'] = 100;\n        }\n        if (!this.ageLimit) {\n            this.filter['lowerAgeLimit'] = null;\n            this.filter['upperAgeLimit'] = null;\n        }\n        this.updateList()\n    }\n\n    pregnancyStatusChanged() {\n        if (this.pregnancyStatus == 1) {\n            this.filter['pregnant'] = true\n        } else if (this.pregnancyStatus == 2) {\n            this.filter['breastfeeding'] = true\n        }\n        if (!this.pregnancyStatus) {\n            this.filter['pregnant'] = null;\n            this.filter['breastfeeding'] = null;\n        }\n        this.updateList()\n    }\n\n    stateChanged(id) {\n        if (id) {\n            this.service.getLgasByState(id).subscribe(res => this.lgas = res)\n        }\n    }\n\n    assigned(val) {\n        if (val == 1) {\n            this.filter.assigned = true;\n        } else if (val == 2) {\n            this.filter.assigned = false;\n        } else {\n            this.filter.assigned = null;\n        }\n        this.updateList();\n    }\n\n    lgaChanged(id) {\n        if (id) {\n            this.filter.lgaId = id\n        } else {\n            this.filter.lgaId = null\n        }\n        this.updateList()\n    }\n\n    buildStats() {\n        this.properties = [];\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Clients(s) Assigned',\n            key: 'as',\n            value: this.stats.assigned\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Stable 1 Year',\n            key: 'as',\n            value: this.stats.stable\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Unstable less than 1 Year',\n            key: 'as',\n            value: this.stats.unstableLessThan1year\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Unstable more than 1 Year',\n            key: 'as',\n            value: this.stats.unstableMoreThan1Year\n        }));\n        this.properties.push(new CardViewIntItemModel({\n            label: 'Awaiting ART',\n            key: 'as',\n            value: this.stats.preArt\n        }));\n    }\n\n    buildGlobalStats() {\n        this.globalProperties = [];\n        if (this.globalStats) {\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Clients(s) Assigned',\n                key: 'as',\n                value: this.globalStats.assigned\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Stable 1 Year',\n                key: 'as',\n                value: this.globalStats.stable\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Unstable less than 1 Year',\n                key: 'as',\n                value: this.globalStats.unstableLessThan1year\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Unstable more than 1 Year',\n                key: 'as',\n                value: this.globalStats.unstableMoreThan1Year\n            }));\n            this.globalProperties.push(new CardViewIntItemModel({\n                label: 'Awaiting ART',\n                key: 'as',\n                value: this.globalStats.preArt\n            }));\n        }\n    }\n}\n","import { Routes } from '@angular/router';\nimport { PatientListComponent } from '../components/case-management/patient.list.component';\n\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Case Management',\n            breadcrumb: 'CASE MANAGEMENT'\n        },\n        children: [\n            {\n                path: '',\n                children: [\n                    {\n                        path: '',\n                        component: PatientListComponent,\n                        data: {\n                            authorities: ['ROLE_USER'],\n                            title: 'Case Management',\n                            breadcrumb: 'CASE MANAGEMENT'\n                        }\n                    }\n                ],\n                data: {\n                    title: 'Case Management',\n                    breadcrumb: 'CASE MANAGEMENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { NgModule } from '@angular/core';\nimport { PatientListComponent } from './components/case-management/patient.list.component';\nimport { MaterialModule } from './material.module';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CovalentDialogsModule, CovalentSearchModule } from '@covalent/core';\nimport { ROUTES } from './services/case-management.route';\nimport { RouterModule } from '@angular/router';\nimport { LamisSharedModule } from '@lamis/web-core';\n\n@NgModule({\n    imports: [\n        MaterialModule,\n        FormsModule,\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        CoreModule,\n        NgbModule,\n        CovalentSearchModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n    ],\n    declarations: [\n        PatientListComponent\n    ],\n    providers: [\n\n    ]\n})\nexport class CaseManagementModule {\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { createRequestOption, SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\nimport { Observable } from 'rxjs';\nimport { CaseManager } from '../model/case-management.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CaseManagerService {\n    public resourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/case-managers';\n    }\n\n    create(caseManager: CaseManager): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .post<CaseManager>(this.resourceUrl, caseManager, {observe: 'response'});\n    }\n\n    update(caseManager: CaseManager): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .put<CaseManager>(this.resourceUrl, caseManager, {observe: 'response'})\n    }\n\n    find(id: number): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .get<CaseManager>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    findByUuid(id: string): Observable<HttpResponse<CaseManager>> {\n        return this.http\n            .get<CaseManager>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'});\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    query(req?: any): Observable<HttpResponse<CaseManager[]>> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<CaseManager[]>(this.resourceUrl, {params: options, observe: 'response'});\n    }\n}\n","import { Component } from '@angular/core';\nimport { CardViewItem, CardViewTextItemModel, NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { CaseManager } from '../../model/case-management.model';\nimport { CaseManagerService } from '../../services/case-manager.service';\n\n@Component({\n    selector: 'case-manager-details',\n    templateUrl: './case-manager.details.component.html'\n})\nexport class CaseManagerDetailsComponent {\n    properties: CardViewItem[] = [];\n    entity: CaseManager;\n\n    constructor(private router: Router, private route: ActivatedRoute, private service: CaseManagerService,\n                private _dialogService: TdDialogService,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.route.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            this.buildProperties();\n        });\n    }\n\n    edit() {\n        this.router.navigate(['/', 'admin', 'case-managers', this.entity.uuid, 'edit']);\n    }\n\n    delete() {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this Case Manager, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.service.delete(this.entity.id).subscribe((res) => {\n                    if (res.ok) {\n                        this.router.navigate(['admin', 'case-managers'])\n                    } else {\n                        this.notificationService.showError('Error deleting Case Manager, please try again')\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    buildProperties() {\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Name',\n            key: 'cs',\n            value: this.entity.name\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Address',\n            key: 'fs',\n            value: this.entity.address\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Gender',\n            key: 'ts',\n            value: this.entity.gender === 'FEMALE' ? 'Female' : 'Male'\n        }));\n        this.properties.push(new CardViewTextItemModel({\n            label: 'Telephone',\n            key: 'cd4p',\n            value: this.entity.phoneNumber\n        }));\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CaseManager } from '../../model/case-management.model';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { CaseManagementService } from '../../services/case-management.service';\nimport { CaseManagerService } from '../../services/case-manager.service';\nimport { Observable } from 'rxjs';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\n@Component({\n    selector: 'case-manager-edit',\n    templateUrl: './case-manager.edit.component.html'\n})\nexport class CaseManagerEditComponent implements OnInit {\n    entity: CaseManager;\n    isSaving: boolean;\n\n    constructor(private caseManagementService: CaseManagementService,\n                private caseManagerService: CaseManagerService,\n                protected notification: NotificationService,\n                protected activatedRoute: ActivatedRoute,\n                private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): CaseManager {\n        return <CaseManager>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n\n            this.caseManagementService.getActiveFacility().subscribe((res: any) => {\n                this.entity.facility = res;\n            });\n        });\n    }\n\n    save() {\n        this.isSaving = true;\n        this.appLoaderService.open('Saving Case Manager..');\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.caseManagerService.update(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.caseManagerService.create(this.entity));\n        }\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.openSnackMessage('Case Manager successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.appLoaderService.close();\n        //this.submitButton.disabled = true;\n        this.notification.showError('Error occurred saving Case Manager; try again');\n        //this.progressBar.mode = 'determinate';\n    }\n\n    protected onError(errorMessage: string) {\n        this.appLoaderService.close();\n        this.notification.showError(errorMessage);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CaseManager } from '../../model/case-management.model';\nimport { CaseManagerService } from '../../services/case-manager.service';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CaseManagementService } from '../../services/case-management.service';\nimport { Facility } from '../../model/facility.model';\n\n@Component({\n    selector: 'case-managers',\n    templateUrl: './case-manager.list.component.html'\n})\nexport class CaseManagerListComponent implements OnInit {\n    page = 0;\n    caseManagers: CaseManager[];\n    loading = false;\n    public itemsPerPage: number = 200;\n    public currentSearch: string = '';\n    totalItems = 0;\n    display = 'list';\n    facility: Facility;\n\n    constructor(private caseManagerService: CaseManagerService,\n                private caseManagementService: CaseManagementService,\n                protected notification: NotificationService,\n                protected router: Router,\n                protected activatedRoute: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.caseManagementService.getActiveFacility().subscribe(res => {\n            this.facility = res;\n            this.onPageChange(0);\n        })\n    }\n\n    public select(data: any): any {\n        this.router.navigate(['..', 'case-managers', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\n    }\n\n    onPageChange(pageInfo) {\n        this.page = pageInfo;\n        this.loadAll();\n    }\n\n    loadPage(page: number) {\n        this.page = page;\n        this.loadAll();\n    }\n\n    loadAll() {\n        this.loading = true;\n        this.caseManagerService.query({\n            keyword: this.currentSearch,\n            page: this.page,\n            id: this.facility.id || 0,\n            size: this.itemsPerPage,\n            sort: ['id', 'asc']\n        }).subscribe(\n            (res: any) => {\n                this.onSuccess(res.body, res.headers)\n            },\n            (res: any) => this.onError(res)\n        );\n    }\n\n    protected onSuccess(data: any, headers: any) {\n        this.caseManagers = data;\n        this.totalItems = headers.get('X-Total-Count');\n        this.loading = false;\n    }\n\n    private onError(error: any) {\n        this.notification.openSnackMessage(error.message);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\nimport { CaseManagerDetailsComponent } from '../components/case-management/case-manager.details.component';\nimport { CaseManager } from '../model/case-management.model';\nimport { CaseManagerService } from './case-manager.service';\nimport { CaseManagerEditComponent } from '../components/case-management/case-manager.edit.component';\nimport { CaseManagerListComponent } from '../components/case-management/case-manager.list.component';\n\n@Injectable()\nexport class CaseManagerResolve implements Resolve<CaseManager> {\n    constructor(private service: CaseManagerService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<CaseManager> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<CaseManager>) => response.ok),\n                map((patient: HttpResponse<CaseManager>) => patient.body)\n            );\n        }\n        return of(<CaseManager>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Case Manager',\n            breadcrumb: 'CASE MANAGERS'\n        },\n        children: [\n            {\n                path: '',\n                component: CaseManagerListComponent,\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Case Managers',\n                    breadcrumb: 'CASE MANAGERS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/view',\n                component: CaseManagerDetailsComponent,\n                resolve: {\n                    entity: CaseManagerResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Case Manager',\n                    breadcrumb: 'CASE MANAGER'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: CaseManagerEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Case Manager',\n                    breadcrumb: 'ADD CASE MANAGER'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: CaseManagerEditComponent,\n                resolve: {\n                    entity: CaseManagerResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Case Manager Edit',\n                    breadcrumb: 'CASE MANAGER EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { NgModule } from '@angular/core';\nimport { CaseManagerDetailsComponent } from './components/case-management/case-manager.details.component';\nimport { CaseManagerEditComponent } from './components/case-management/case-manager.edit.component';\nimport { CaseManagerListComponent } from './components/case-management/case-manager.list.component';\nimport { MaterialModule } from './material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CaseManagerResolve, ROUTES } from './services/case-manager.route';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CovalentDialogsModule, CovalentSearchModule } from '@covalent/core';\nimport { LamisSharedModule } from '@lamis/web-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        CoreModule,\n        NgbModule,\n        CovalentSearchModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n    ],\n    declarations: [\n        CaseManagerDetailsComponent,\n        CaseManagerEditComponent,\n        CaseManagerListComponent\n    ],\n    providers: [\n        CaseManagerResolve\n    ]\n})\nexport class CaseManagerModule {\n}\n"]}