import * as tslib_1 from "tslib";
import { Inject, Injectable } from "@angular/core";
import { HttpClient, HttpParams } from "@angular/common/http";
import { DATE_FORMAT, SERVER_API_URL_CONFIG } from "@lamis/web-core";
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@lamis/web-core";
const moment = moment_;
let ReportService = class ReportService {
    constructor(http, serverUrl) {
        this.http = http;
        this.serverUrl = serverUrl;
        this.resourceUrl = '';
        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/reporting';
    }
    artSummary(reportingPeriod, id, today) {
        let params = new HttpParams();
        params = params.append('reportingPeriod', moment(reportingPeriod).format(DATE_FORMAT));
        params = params.append("id", id.toString());
        params = params.append("today", today.toString());
        return this.http.get(`${this.resourceUrl}/art-summary`, { params, responseType: 'blob' });
    }
    patientLineList(params) {
        params.dateCurrentStatusBegin = params.dateCurrentStatusBegin != null && params.dateCurrentStatusBegin.isValid() ? params.dateCurrentStatusBegin.format(DATE_FORMAT) : null;
        params.dateCurrentStatusEnd = params.dateCurrentStatusEnd != null && params.dateCurrentStatusEnd.isValid() ? params.dateCurrentStatusEnd.format(DATE_FORMAT) : null;
        params.dateLastViralLoadBegin = params.dateLastViralLoadBegin != null && params.dateLastViralLoadBegin.isValid() ? params.dateLastViralLoadBegin.format(DATE_FORMAT) : null;
        params.dateLastViralLoadEnd = params.dateLastViralLoadEnd != null && params.dateLastViralLoadEnd.isValid() ? params.dateLastViralLoadEnd.format(DATE_FORMAT) : null;
        params.dateRegistrationBegin = params.dateRegistrationBegin != null && params.dateRegistrationBegin.isValid() ? params.dateRegistrationBegin.format(DATE_FORMAT) : null;
        params.dateRegistrationEnd = params.dateRegistrationEnd != null && params.dateRegistrationEnd.isValid() ? params.dateRegistrationEnd.format(DATE_FORMAT) : null;
        params.dateStartedBegin = params.dateStartedBegin != null && params.dateStartedBegin.isValid() ? params.dateStartedBegin.format(DATE_FORMAT) : null;
        params.dateStartedEnd = params.dateStartedEnd != null && params.dateStartedEnd.isValid() ? params.dateStartedEnd.format(DATE_FORMAT) : null;
        return this.http.post(`${this.resourceUrl}/patient-line-list`, params, { responseType: 'blob' });
    }
    convertData(ids, report, labTest) {
        let params = new HttpParams();
        ids.forEach(id => params = params.append("ids", id.toString()));
        if (!!labTest) {
            params = params.append("labTest", labTest.toString());
        }
        params = params.append("report", report.toString());
        return this.http.get(`${this.resourceUrl}/convert-data`, { params, responseType: 'blob' });
    }
    getRegimenTypes() {
        return this.http.get(`${this.resourceUrl}/regimen-types`);
    }
    getStates() {
        return this.http.get('/api/states');
    }
    getLgasByState(id) {
        return this.http.get(`/api/provinces/state/${id}`);
    }
    getActiveFacility() {
        return this.http.get('/api/facilities/active');
    }
    listFacilities() {
        return this.http.get(`${this.resourceUrl}/list-facilities`);
    }
    labTest() {
        return this.http.get(`${this.resourceUrl}/lab-tests`);
    }
    download(name) {
        return this.http.get(`${this.resourceUrl}/download/${name}`, { responseType: 'blob' });
    }
    listFiles() {
        return this.http.get(`${this.resourceUrl}/list-files`);
    }
};
ReportService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [SERVER_API_URL_CONFIG,] }] }
];
ReportService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ReportService_Factory() { return new ReportService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SERVER_API_URL_CONFIG)); }, token: ReportService, providedIn: "root" });
ReportService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(1, Inject(SERVER_API_URL_CONFIG)),
    tslib_1.__metadata("design:paramtypes", [HttpClient, Object])
], ReportService);
export { ReportService };
//# sourceMappingURL=data:application/json;base64,