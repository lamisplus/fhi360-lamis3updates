{"version":3,"sources":["../../../../../../../../node_modules/tslib/tslib.es6.js","ng://lamis-patient-1.3.0/lib/services/patient.service.ts","ng://lamis-patient-1.3.0/lib/components/patient-list.component.ts","ng://lamis-patient-1.3.0/lib/components/patient-details.component.ts","ng://lamis-patient-1.3.0/lib/components/patient-edit.component.ts","ng://lamis-patient-1.3.0/lib/components/detailed.timeline.component.ts","ng://lamis-patient-1.3.0/lib/services/patient.route.ts","ng://lamis-patient-1.3.0/lib/components/widget-container.component.ts","ng://lamis-patient-1.3.0/lib/services/observation.service.ts","ng://lamis-patient-1.3.0/lib/components/timeline.component.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.widget.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.event.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.badge.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.footer.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.header.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.panel.ts","ng://lamis-patient-1.3.0/lib/widget/timeline.widget.module.ts","ng://lamis-patient-1.3.0/lib/components/unique-hospital-num.validator.ts","ng://lamis-patient-1.3.0/lib/components/summary.widget.component.ts","ng://lamis-patient-1.3.0/lib/patient.module.ts","ng://lamis-patient-1.3.0/lib/components/client-status.component.ts","ng://lamis-patient-1.3.0/lib/services/status.route.ts","ng://lamis-patient-1.3.0/lib/client-status.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","moment","moment_","PatientService","http","serverUrl","authServerProvider","this","resourceUrl","resourceSearchUrl","ovcResourceUrl","SERVER_API_URL","prototype","create","data","_this","patient","convertDateFromClient","post","observe","pipe","map","res","convertDateFromServer","update","put","share","find","id","get","findByUuid","query","req","options","createRequestOption","params","convertDateArrayFromServer","delete","getOVCByPatient","widgets","patientId","observations","activities","detailed","sort","t1","t2","d1","date","diff","getActiveFacility","getAllFacility","getStates","getLgasByState","getStateByLga","getFacility","existsByHospitalNumber","hospitalNum","number","numberExists","getStatusDatesByPatient","forEach","getSummaryForPatient","saveClientStatus","status","console","log","copy","PatientService_1","convertStatusFromClient","updateClientStatus","findClientStatus","body","dateTracked","dateStatus","agreedDate","currentClientStatus","responseType","getStatusName","assign","isValid","format","DATE_FORMAT","dob","dateBirth","dateRegistration","dateStarted","dateConfirmedHiv","dateEnrolledPMTCT","pregnant","pregnancyStatus","breastfeeding","name","surname","otherNames","gender","HttpClient","Inject","args","SERVER_API_URL_CONFIG","AuthServerProvider","Injectable","providedIn","tslib_1.__param","PatientListComponent","patientService","notification","router","activatedRoute","page","loading","itemsPerPage","currentSearch","totalItems","display","facility","ngOnDestroy","ngOnInit","subscribe","onPageChange","searchPatient","search","loadAll","select","path","navigateByUrl","obj","uuid","navigate","relativeTo","pageInfo","loadPage","keyword","facilityId","size","onSuccess","headers","onError","patients","openSnackMessage","message","NotificationService","Router","ActivatedRoute","tslib_1.__decorate","Input","Component","selector","template","PatientDetailsComponent","route","cfr","_dialogService","notificationService","_viewContainerRef","renderer2","properties","_a","entity","attacheWidgets","getObservations","edit","updateStatus","openConfirm","title","cancelButton","acceptButton","width","afterClosed","accept","ok","showError","previousState","window","history","back","getComponentFactory","Array","from","values","x","componentType","addObservation","action","split","parts","apply","buildWidget","componentName","icon","factory","undefined","parentFactory","componentRef","container","createComponent","instance","embeddedContainer","cmpName","constructor","TypeError","instanceRef","addClass","location","nativeElement","patientUuid","age","ComponentFactoryResolver","TdDialogService","ViewContainerRef","Renderer2","ViewChild","read","static","PatientEditComponent","loaderService","ovc","today","minDob","subtract","minDateRegistration","maxDateBirth","maxDateConfirmed","minDateConfirmed","ovcApplicable","createEntity","isSaving","ovcMin","clone","lga","add","state","stateChange","extra","householdUniqueNo","referredTo","referredFrom","dateReferredTo","dateReferredFrom","servicesProvided","isAfter","states","entityCompare","e1","e2","estimateDob","ageUnit","lgas","dateBirthChanged","isBefore","dateRegistrationChanged","save","openAlert","disableClose","open","subscribeToSaveResponse","dobEstimated","result","close","onSaveSuccess","onSaveError","showInfo","errorMessage","isOVCAge","AppLoaderService","DetailedTimelineComponent","PatientResolve","service","resolve","filter","response","of","ROUTES","breadcrumb","children","component","pagingParams","PagingParamsResolve","authorities","WidgetContainerComponent","ObservationService","deleteObservation","getObservation","TimelineComponent","observationService","loadActivities","view","timeLine","TimelineWidget","TimelineEvent","parent","_side","side","updateRowClasses","checkClass","leftSide","oddClass","evenClass","TimelineBadge","event","TimelineFooter","TimelineHeader","TimelinePanel","COMPONENTS","TimelineWidgetModule","NgModule","declarations","exports","UniqueHospitalNumValidator","validate","control","valueChanges","debounceTime","take","switchMap","UniqueHospitalNumValidator_1","Directive","providers","provide","NG_ASYNC_VALIDATORS","useExisting","multi","SummaryWidgetComponent","summaries","propertiesForSummary","summary","_b","tslib_1.__values","fields","_c","field","dataType","type","toLowerCase","item","FieldType","boolean","CardViewBoolItemModel","label","int","CardViewIntItemModel","float","CardViewFloatItemModel","CardViewDateItemModel","datetime","CardViewDatetimeItemModel","CardViewTextItemModel","PatientModule","imports","CommonModule","NgJhipsterModule","LamisSharedModule","JsonFormModule","MatFormioModule","MatInputModule","MatIconModule","MatDividerModule","MatCardModule","MatSelectModule","MatButtonModule","MatCheckboxModule","MatTabsModule","RouterModule","forChild","MatProgressBarModule","CovalentMessageModule","MatListModule","MatChipsModule","CoreModule","CovalentDialogsModule","CovalentSearchModule","NgbPaginationModule","FormsModule","ReactiveFormsModule","MatDateFormatModule","CustomFormsModule","MatAutocompleteModule","entryComponents","ClientStatusComponent","appLoaderService","facilities","statusDates","statuses","fac","f","snapshot","paramMap","facilityTransferredTo","change","input","includes","filterDates","exists","outcome","StatusResolve","ClientStatusModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {\n    AuthServerProvider,\n    createRequestOption,\n    DATE_FORMAT,\n    SERVER_API_URL_CONFIG,\n    ServerApiUrlConfig\n} from '@lamis/web-core';\nimport { map, share } from 'rxjs/operators';\nimport { OVC, Patient, StatusHistory } from '../model/patient.model';\n\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { Facility } from '../model/facility.model';\nimport { ValidationErrors } from '@angular/forms';\nimport { Summary } from '../components/summary.widget.component';\n\nconst moment = moment_;\n\ntype EntityResponseType = HttpResponse<Patient>;\ntype EntityArrayResponseType = HttpResponse<Patient[]>;\n\nexport interface PatientActivity {\n    uuid?: string;\n    id?: any;\n    name?: string;\n    icon?: string;\n    path?: string;\n    editable?: boolean;\n    viewable?: boolean;\n    deletable?: boolean;\n}\n\nexport interface PatientTimeline {\n    date?: string;\n    activities?: PatientActivity[];\n}\n\nexport interface PatientWidget {\n    title: string;\n    componentName: string;\n    index: number;\n    icon?: string;\n}\n\nexport interface PatientObservation {\n    name?: string;\n    path?: string;\n    icon?: string;\n    tooltip?: string;\n}\n\n@Injectable({providedIn: 'root'})\nexport class PatientService {\n    public resourceUrl = '';\n    public resourceSearchUrl = '';\n    private ovcResourceUrl = '';\n\n    constructor(protected http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig,\n                private authServerProvider: AuthServerProvider) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';\n        this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';\n        this.ovcResourceUrl = serverUrl.SERVER_API_URL + '/api/ovcs';\n    }\n\n    create(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .post<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(data: Patient): Observable<EntityResponseType> {\n        const patient = this.convertDateFromClient(data);\n        return this.http\n            .put<Patient>(this.resourceUrl, patient, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)),\n                share());\n    }\n\n    find(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findByUuid(id: any): Observable<EntityResponseType> {\n        return this.http\n            .get<Patient>(`${this.resourceUrl}/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<Patient[]>(this.resourceUrl, {params: options, observe: 'response'})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: 'response'});\n    }\n\n    getOVCByPatient(id: number) {\n        return this.http.get<OVC>(`${this.ovcResourceUrl}/patient/${id}`)\n    }\n\n    widgets(patientId: number): Observable<PatientWidget[]> {\n        return this.http.get<PatientWidget[]>(`${this.resourceUrl}/${patientId}/widgets`, {observe: 'body'})\n    }\n\n    observations(patientId: number): Observable<PatientObservation[]> {\n        return this.http.get<PatientObservation[]>(`${this.resourceUrl}/${patientId}/observations`, {\n            observe: 'body'\n        })\n    }\n\n    activities(patientId: number, detailed: boolean): Observable<PatientTimeline[]> {\n        return this.http.get<PatientTimeline[]>(`${this.resourceUrl}/${patientId}/activities?full=${detailed}`, {observe: 'body'})\n            .pipe(map(res => {\n                res.sort((t1, t2) => {\n                    const d1 = moment(t1.date, 'DD MMM, YYYY');\n                    const d2 = moment(t2.date, 'DD MMM, YYYY');\n                    return d2.diff(d1);\n                });\n                return res;\n            }))\n    }\n\n    getActiveFacility() {\n        return this.http.get<Facility>('/api/facilities/active')\n    }\n\n    getAllFacility() {\n        return this.http.get<Facility[]>('/api/facilities')\n    }\n\n    getStates() {\n        return this.http.get<any[]>('/api/states')\n    }\n\n    getLgasByState(id) {\n        return this.http.get<any[]>(`/api/provinces/state/${id}`)\n    }\n\n    getStateByLga(id) {\n        return this.http.get(`/api/provinces/${id}/state`)\n    }\n\n    getFacility(id) {\n        return this.http.get(`/api/facilities/${id}`)\n    }\n\n    existsByHospitalNumber(hospitalNum: string): Observable<ValidationErrors | null> {\n        return this.http.post<boolean>(`${this.resourceUrl}/exists/hospital-number`, {number: hospitalNum})\n            .pipe(map((res => res ? {'numberExists': true} : null)));\n    }\n\n    getStatusDatesByPatient(patientId: number) {\n        return this.http.get<Moment[]>(`/api/client-statuses/patient/${patientId}/status-dates`)\n            .pipe(map((res) => {\n                    res.forEach(d => moment(d));\n                    return res;\n                })\n            )\n    }\n\n    getSummaryForPatient(id: number) {\n        return this.http.get<Summary[]>(`${this.resourceUrl}/${id}/summary`)\n    }\n\n    saveClientStatus(status: StatusHistory) {\n        console.log('Status', status);\n        const copy = PatientService.convertStatusFromClient(status);\n        console.log('Copy', copy);\n        return this.http.post<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    updateClientStatus(status: StatusHistory) {\n        const copy = PatientService.convertStatusFromClient(status);\n        return this.http.put<StatusHistory>('/api/client-statuses', copy, {observe: 'response'})\n    }\n\n    findClientStatus(id) {\n        return this.http.get<StatusHistory>(`/api/client-statuses/by-uuid/${id}`, {observe: 'response'})\n            .pipe(map((res: HttpResponse<StatusHistory>) => {\n                res.body.dateTracked = res.body.dateTracked != null ? moment(res.body.dateTracked) : null;\n                res.body.dateStatus = res.body.dateStatus != null ? moment(res.body.dateStatus) : null;\n                res.body.agreedDate = res.body.agreedDate != null ? moment(res.body.agreedDate) : null;\n                return res;\n            }))\n    }\n\n    currentClientStatus(patientId: string) {\n        return this.http.get(`/api/client-statuses/patient/${patientId}/current`, {responseType: 'text'})\n    }\n\n    getStatusName(id: number) {\n        return this.http.get(`/api/client-statuses/${id}/name`, {responseType: 'text'})\n    }\n\n    private static convertStatusFromClient(status: StatusHistory): StatusHistory {\n        const copy: StatusHistory = Object.assign({}, status, {\n                dateStatus: status.dateStatus != null && status.dateStatus.isValid() ? status.dateStatus.format(DATE_FORMAT) : null,\n                agreedDate: status.agreedDate != null && status.agreedDate.isValid() ? status.agreedDate.format(DATE_FORMAT) : null,\n                dateTracked: status.dateTracked != null && status.dateTracked.isValid() ? status.dateTracked.format(DATE_FORMAT) : null,\n            }\n        );\n        return copy;\n    }\n\n    protected convertDateFromClient(patient: Patient): Patient {\n        const copy: Patient = Object.assign({}, patient, {\n            dob: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(DATE_FORMAT) : null,\n            dateRegistration: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(DATE_FORMAT) : null,\n            dateStarted: patient.dateStarted != null && patient.dateStarted.isValid() ? patient.dateStarted.format(DATE_FORMAT) : null,\n            dateConfirmedHiv: patient.dateConfirmedHiv != null && patient.dateConfirmedHiv.isValid() ? patient.dateConfirmedHiv.format(DATE_FORMAT) : null,\n            dateEnrolledPMTCT: patient.dateEnrolledPMTCT != null && patient.dateEnrolledPMTCT.isValid() ? patient.dateEnrolledPMTCT.format(DATE_FORMAT) : null,\n            pregnant: patient.pregnancyStatus === 2,\n            breastfeeding: patient.pregnancyStatus === 3\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.name = res.body.surname + ', ' + res.body.otherNames;\n            res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;\n            res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;\n            res.body.dateConfirmedHiv = res.body.dateConfirmedHiv != null ? moment(res.body.dateConfirmedHiv) : null;\n            res.body.dateEnrolledPMTCT = res.body.dateEnrolledPMTCT != null ? moment(res.body.dateEnrolledPMTCT) : null;\n            res.body.dateStarted = res.body.dateStarted != null ? moment(res.body.dateStarted) : null;\n            res.body.pregnancyStatus = res.body.pregnant != null && res.body.pregnant ? 2 : res.body.gender === 'FEMALE' ? 1 : null;\n            res.body.pregnancyStatus = res.body.breastfeeding != null && res.body.breastfeeding ? 3 : res.body.gender === 'FEMALE' ? 1 : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((patient: Patient) => {\n                patient.name = patient.surname + ', ' + patient.otherNames;\n                patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;\n                patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;\n                patient.dateStarted = patient.dateStarted != null ? moment(patient.dateStarted) : null;\n            });\n        }\n        return res;\n    }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { Facility } from '../model/facility.model';\r\n\r\n@Component({\r\n    selector: 'lamis-patients',\r\n    templateUrl: './patient-list.component.html'\r\n})\r\nexport class PatientListComponent implements OnInit, OnDestroy {\r\n    @Input()\r\n    path: string;\r\n    page = 0;\r\n    patients: Patient[];\r\n    loading = false;\r\n    public itemsPerPage: number = 10;\r\n    public currentSearch: string = '';\r\n    totalItems = 0;\r\n    display = 'list';\r\n    facility: Facility = {};\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                protected router: Router,\r\n                protected activatedRoute: ActivatedRoute) {\r\n        this.currentSearch = '';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe(res => {\r\n            this.facility = res;\r\n            this.onPageChange(0);\r\n        })\r\n    }\r\n\r\n    searchPatient(search: any) {\r\n        this.currentSearch = search;\r\n        this.page = 0;\r\n        this.loadAll();\r\n    }\r\n\r\n\r\n    public select(data: any): any {\r\n        if (!!this.path) {\r\n            this.router.navigateByUrl(`${this.path}/${data.obj.uuid}`)\r\n        } else {\r\n            this.router.navigate(['..', 'patients', data.obj.uuid, 'view'], {relativeTo: this.activatedRoute});\r\n        }\r\n    }\r\n\r\n    onPageChange(pageInfo) {\r\n        this.page = pageInfo;\r\n        this.loadAll();\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.loadAll();\r\n    }\r\n\r\n    loadAll() {\r\n        this.loading = true;\r\n        this.patientService.query({\r\n            keyword: this.currentSearch,\r\n            page: this.page > 0 ? this.page - 1 : 0,\r\n            facilityId: this.facility.id || 0,\r\n            size: this.itemsPerPage,\r\n            sort: ['id', 'asc']\r\n        }).subscribe(\r\n            (res: any) => {\r\n                this.onSuccess(res.body, res.headers)\r\n            },\r\n            (res: any) => this.onError(res)\r\n        );\r\n    }\r\n\r\n    protected onSuccess(data: any, headers: any) {\r\n        this.patients = data;\r\n        this.totalItems = headers.get('X-Total-Count');\r\n        this.loading = false;\r\n    }\r\n\r\n    private onError(error: any) {\r\n        this.notification.openSnackMessage(error.message);\r\n        this.loading = false;\r\n    }\r\n}\r\n\r\n","import {\r\n    Component,\r\n    ComponentFactory,\r\n    ComponentFactoryResolver,\r\n    OnDestroy,\r\n    OnInit,\r\n    Renderer2,\r\n    ViewChild,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { Patient } from '../model/patient.model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PatientObservation, PatientService, PatientWidget } from '../services/patient.service';\r\nimport { TdDialogService } from '@covalent/core';\r\nimport { CardViewItem, NotificationService } from '@alfresco/adf-core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient',\r\n    templateUrl: './patient-details.component.html',\r\n    styleUrls: ['./patient-details.component.scss']\r\n})\r\nexport class PatientDetailsComponent implements OnInit, OnDestroy {\r\n    template = 'patient-details';\r\n    entity: Patient;\r\n    observations: PatientObservation[];\r\n    @ViewChild('container', {read: ViewContainerRef, static: true}) container: ViewContainerRef;\r\n    properties: CardViewItem[] = [];\r\n    status: string;\r\n\r\n    constructor(private router: Router, private route: ActivatedRoute, private patientService: PatientService,\r\n                private cfr: ComponentFactoryResolver, private _dialogService: TdDialogService,\r\n                private notificationService: NotificationService, private _viewContainerRef: ViewContainerRef,\r\n                private renderer2: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            this.patientService.currentClientStatus(entity.uuid).subscribe(res => {\r\n                this.status = res;\r\n            });\r\n            this.attacheWidgets();\r\n            this.getObservations();\r\n        });\r\n    }\r\n\r\n    edit() {\r\n        this.router.navigate(['..', 'edit'], {relativeTo: this.route});\r\n    }\r\n\r\n    updateStatus() {\r\n        this.router.navigate(['/', 'client-statuses', 'patient', this.entity.uuid, 'new']);\r\n    }\r\n\r\n    delete() {\r\n        this._dialogService.openConfirm({\r\n            title: 'Confirm',\r\n            message: 'Do you want to delete this patient, action cannot be reversed?',\r\n            cancelButton: 'No',\r\n            acceptButton: 'Yes',\r\n            width: '500px',\r\n        }).afterClosed().subscribe((accept: boolean) => {\r\n            if (accept) {\r\n                this.patientService.delete(this.entity.id).subscribe((res) => {\r\n                    if (res.ok) {\r\n                        this.router.navigate(['patients'])\r\n                    } else {\r\n                        this.notificationService.showError('Error deleting patient, please try again')\r\n                    }\r\n                })\r\n            } else {\r\n                // DO SOMETHING ELSE\r\n            }\r\n        });\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    private getComponentFactory(name: string) {\r\n        const factories = Array.from(this.cfr['_factories'].values());\r\n        return <ComponentFactory<any>>factories.find((x: any) => x.componentType.name === name);\r\n    }\r\n\r\n    getObservations() {\r\n        this.patientService.observations(this.entity.id).subscribe((res: PatientObservation[]) => this.observations = res)\r\n    }\r\n\r\n    addObservation(action: PatientObservation) {\r\n        const path = action.path.split('/');\r\n        const parts = ['/'];\r\n        parts.push(...path);\r\n        parts.push('patient', this.entity.uuid, 'new');\r\n        this.router.navigate([...parts]);\r\n    }\r\n\r\n    private attacheWidgets() {\r\n        this.buildWidget('TimelineComponent', 'Recent Activities', 'timeline');\r\n        this.buildWidget('SummaryWidgetComponent', 'Patient Summary', 'account_balance_wallet');\r\n        /*this.patientService.widgets(this.entity.id).subscribe((res: PatientWidget[]) => {\r\n            res.forEach((widget: PatientWidget) => {\r\n                this.buildWidget(widget.componentName, widget.title, widget.icon);\r\n            })\r\n        });*/\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n    }\r\n\r\n    private buildWidget(componentName: string, title: string, icon: string) {\r\n        const factory = this.getComponentFactory(componentName);\r\n        if (factory !== undefined) {\r\n            const parentFactory = this.getComponentFactory('WidgetContainerComponent');\r\n            const componentRef = this.container.createComponent(parentFactory);\r\n            if (!componentRef.instance.embeddedContainer) {\r\n                const cmpName = componentRef.instance.constructor.name;\r\n                throw new TypeError(`Trying to render embedded content. ${cmpName} must have @ViewChild() embeddedContainer defined`);\r\n            }\r\n            console.log('Created component', componentRef);\r\n            const instanceRef = componentRef.instance.embeddedContainer.createComponent(factory);\r\n            this.renderer2.addClass(componentRef.location.nativeElement, 'col-md-6');\r\n            componentRef.instance.icon = icon;\r\n            componentRef.instance.title = title;\r\n            try {\r\n                instanceRef.instance.patientId = this.entity.id;\r\n                instanceRef.instance.patientUuid = this.entity.uuid;\r\n            } catch (e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    age(dob: Moment) {\r\n        let age = moment().diff(dob, 'years');\r\n        if (age > 0) {\r\n            return age + ' year(s)'\r\n        }\r\n\r\n        age = moment().diff(dob, 'months');\r\n        if (age > 0) {\r\n            return age + ' month(s)';\r\n        }\r\n        return moment().diff(dob, 'weeks') + ' week(s)';\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { OVC, Patient } from '../model/patient.model';\r\nimport { PatientService } from '../services/patient.service';\r\nimport { NotificationService } from '@alfresco/adf-core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment_ from 'moment';\r\nimport { DurationInputArg2, Moment } from 'moment';\r\nimport { AppLoaderService, DATE_FORMAT, entityCompare } from '@lamis/web-core';\r\nimport { TdDialogService } from '@covalent/core';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n    selector: 'lamis-patient-edit',\r\n    templateUrl: './patient-edit.component.html'\r\n})\r\nexport class PatientEditComponent implements OnInit {\r\n    template = 'patient-edit';\r\n    entity: Patient;\r\n    ovc: OVC = {};\r\n    patient: Patient;\r\n    isSaving: boolean;\r\n    error = false;\r\n    today = moment();\r\n    minDob = moment().subtract(75, 'years');\r\n    ovcMin: Moment;\r\n    minDateRegistration: Moment = moment('1998', 'YYYY');\r\n    maxDateBirth: Moment = moment().subtract(2, 'months');\r\n    maxDateConfirmed = moment();\r\n    minDateConfirmed = moment('1998', 'YYYY');\r\n    age: number;\r\n    ageUnit: DurationInputArg2;\r\n    state: any;\r\n    states: any[];\r\n    lgas: any[];\r\n    ovcApplicable = false;\r\n    householdUniqueNo: string;\r\n    referredTo: string;\r\n    dateReferredTo: Moment;\r\n    referredFrom: string;\r\n    dateReferredFrom: Moment;\r\n\r\n    constructor(private patientService: PatientService,\r\n                protected notification: NotificationService,\r\n                private loaderService: AppLoaderService,\r\n                private _dialogService: TdDialogService,\r\n                protected activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    createEntity(): Patient {\r\n        return <Patient>{};\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.patientService.getActiveFacility().subscribe((res: any) => {\r\n            this.entity.facility = res;\r\n        });\r\n        this.isSaving = false;\r\n        this.activatedRoute.data.subscribe(({entity}) => {\r\n            this.entity = !!entity && entity.body ? entity.body : entity;\r\n            if (this.entity === undefined) {\r\n                this.entity = this.createEntity();\r\n            }\r\n            if (this.entity.id) {\r\n                this.ovcMin = this.entity.dateBirth.clone();\r\n            }\r\n            if (this.entity.id && this.entity.lga) {\r\n                this.minDateRegistration = this.entity.dateBirth.clone().add(2, 'month');\r\n                this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'month');\r\n                this.patientService.getStateByLga(this.entity.lga.id).subscribe(res => {\r\n                    this.state = res;\r\n                    this.stateChange(this.state.id);\r\n                })\r\n            }\r\n            if (this.entity.extra && this.entity.extra.ovc) {\r\n                this.ovc.householdUniqueNo = this.entity.extra.ovc.householdUniqueNo;\r\n                this.ovc.referredTo = this.entity.extra.ovc.referredTo;\r\n                this.ovc.referredFrom = this.entity.extra.ovc.referredFrom;\r\n                if (!!this.entity.extra.ovc.dateReferredTo) {\r\n                    this.ovc.dateReferredTo = moment(this.entity.extra.ovc.dateReferredTo);\r\n                }\r\n\r\n                if (!!this.entity.extra.ovc.dateReferredFrom) {\r\n                    this.ovc.dateReferredFrom = moment(this.entity.extra.ovc.dateReferredFrom);\r\n                }\r\n                if (!this.entity.extra.ovc.servicesProvided) {\r\n                    this.ovc.servicesProvided = [];\r\n                }\r\n            }\r\n            const date = this.entity.dateBirth && this.entity.dateBirth.clone() || moment('1998-01-01', 'YYYY-MM-DD');\r\n            if (!moment().subtract(17, 'years').isAfter(date)) {\r\n                this.ovcApplicable = true;\r\n            }\r\n        });\r\n\r\n        this.patientService.getStates().subscribe(res => this.states = res);\r\n    }\r\n\r\n    entityCompare(e1, e2) {\r\n        return entityCompare(e1, e2);\r\n    }\r\n\r\n    estimateDob() {\r\n        if (this.age && this.ageUnit && this.entity.dateRegistration) {\r\n            const dateRegistration = this.entity.dateRegistration;\r\n            this.entity.dateBirth = dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            this.ovcMin = this.entity.dateBirth.clone();\r\n            this.minDateConfirmed = this.entity.dateBirth.clone().add(1, 'months');\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    stateChange(id) {\r\n        this.patientService.getLgasByState(id).subscribe(res => this.lgas = res)\r\n    }\r\n\r\n    previousState() {\r\n        window.history.back();\r\n    }\r\n\r\n    dateBirthChanged(date: Moment) {\r\n        this.minDateRegistration = date.clone().add(2, 'months');\r\n        this.minDateConfirmed = date.clone().add(1, 'months');\r\n        if (this.minDateRegistration.isBefore(moment('1998', 'YYYY'), 'day')) {\r\n            this.minDateRegistration = moment('1998', 'YYYY');\r\n            this.minDateConfirmed = moment('1998', 'YYYY');\r\n        }\r\n        this.ovcMin = date.clone();\r\n        if (!!this.entity.dateRegistration) {\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    dateRegistrationChanged(date: Moment) {\r\n        this.maxDateBirth = date.clone().subtract(2, 'months');\r\n        this.maxDateConfirmed = date.clone();\r\n\r\n        if (!!this.entity.dateBirth) {\r\n            this.ovcApplicable = !this.entity.dateRegistration.clone().subtract(17, 'years').isAfter(this.entity.dateBirth);\r\n        }\r\n    }\r\n\r\n    save() {\r\n        //this.progressBar.mode = 'indeterminate';\r\n        this.isSaving = true;\r\n        if (this.ovcApplicable) {\r\n            if (!this.entity.extra) {\r\n                this.entity.extra = {};\r\n            }\r\n            this.entity.extra.ovc = {};\r\n            this.entity.extra.ovc = this.ovc;\r\n            this.entity.extra.ovc.dateReferredFrom = this.ovc.dateReferredFrom != null && this.ovc.dateReferredFrom.isValid() ?\r\n                this.ovc.dateReferredFrom.format(DATE_FORMAT) : null;\r\n            this.entity.extra.ovc.dateReferredTo = this.ovc.dateReferredTo != null && this.ovc.dateReferredTo.isValid() ?\r\n                this.ovc.dateReferredTo.format(DATE_FORMAT) : null;\r\n\r\n            if (!!this.ovc.householdUniqueNo && !(!!this.ovc.referredFrom || !!this.ovc.referredTo)) {\r\n                this._dialogService.openAlert({\r\n                    title: 'OVC Partner is required',\r\n                    message: 'Please indicate either OVC Partner transferred to or from',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n\r\n            if ((!!this.ovc.referredTo || !!this.ovc.referredFrom) && !this.ovc.householdUniqueNo) {\r\n                this._dialogService.openAlert({\r\n                    title: 'Household number is required',\r\n                    message: 'Please indicate Household Unique No',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n\r\n            if (!!this.ovc.referredFrom && !!this.ovc.referredTo) {\r\n                this._dialogService.openAlert({\r\n                    title: 'OVC Partner mismatch',\r\n                    message: 'Please provide either OVC Partner transfer to or from, not both',\r\n                    disableClose: true\r\n                });\r\n\r\n                return\r\n            }\r\n        }\r\n        this.loaderService.open('Saving patient...');\r\n        if (!this.entity.id) {\r\n            if (this.entity.dobEstimated) {\r\n                this.entity.dateBirth = this.entity.dateRegistration.clone().subtract(this.age, this.ageUnit);\r\n            }\r\n            this.subscribeToSaveResponse(this.patientService.create(this.entity));\r\n        } else {\r\n            this.subscribeToSaveResponse(this.patientService.update(this.entity));\r\n        }\r\n    }\r\n\r\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\r\n        this.loaderService.close();\r\n        result.subscribe(\r\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\r\n            (res: HttpErrorResponse) => {\r\n                this.onSaveError();\r\n                this.onError(res.message)\r\n            });\r\n    }\r\n\r\n    private onSaveSuccess(result: any) {\r\n        this.isSaving = false;\r\n        this.notification.showInfo('Patient successfully saved');\r\n        this.previousState();\r\n    }\r\n\r\n    private onSaveError() {\r\n        this.isSaving = false;\r\n        this.error = true;\r\n        //this.progressBar.mode = 'determinate';\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.notification.showError(errorMessage);\r\n    }\r\n\r\n\r\n    isOVCAge() {\r\n        if (this.age && this.ageUnit === 'years') {\r\n            if (this.age >= 10 && this.age <= 24) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const dob = this.entity.dateBirth.clone();\r\n        const diff = this.entity.dateRegistration.clone().diff(dob);\r\n\r\n        return diff >= 10 && diff <= 24;\r\n    }\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { PatientService } from \"../services/patient.service\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n    selector: 'detailed-timeline',\n    templateUrl: './detailed.timeline.component.html'\n})\nexport class DetailedTimelineComponent implements OnInit {\n    id: number;\n    uuid: string;\n\n    constructor(private patientService: PatientService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n        this.route.data.subscribe(({entity}) => {\n            const patient = !!entity && entity.body ? entity.body : entity;\n            this.id = patient.id;\n            this.uuid = patient.uuid;\n        });\n    }\n\n    previousState() {\n        window.history.back();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { PagingParamsResolve, UserRouteAccessService } from '@lamis/web-core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PatientService } from './patient.service';\nimport { Patient } from '../model/patient.model';\nimport { PatientDetailsComponent } from '../components/patient-details.component';\nimport { PatientEditComponent } from '../components/patient-edit.component';\nimport { PatientListComponent } from '../components/patient-list.component';\nimport { DetailedTimelineComponent } from '../components/detailed.timeline.component';\n\n@Injectable()\nexport class PatientResolve implements Resolve<Patient> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Patient> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findByUuid(id).pipe(\n                filter((response: HttpResponse<Patient>) => response.ok),\n                map((patient: HttpResponse<Patient>) => patient.body)\n            );\n        }\n        return of(<Patient>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Patients',\n            breadcrumb: 'PATIENTS'\n        },\n        children: [\n            {\n                path: '',\n                component: PatientListComponent,\n                resolve: {\n                    pagingParams: PagingParamsResolve\n                },\n                data: {},\n            },\n            {\n                path: ':id/view',\n                component: PatientDetailsComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_USER'],\n                    title: 'Patient Details',\n                    breadcrumb: 'PATIENT DETAILS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: 'new',\n                component: PatientEditComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Add Patient',\n                    breadcrumb: 'ADD PATIENT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/edit',\n                component: PatientEditComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Edit',\n                    breadcrumb: 'PATIENT EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/timeline',\n                component: DetailedTimelineComponent,\n                resolve: {\n                    entity: PatientResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Patient Timeline',\n                    breadcrumb: 'PATIENT TIMELINE'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n\n","import { Component, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n    selector:'widget-container',\n    templateUrl: './widget-container.component.html',\n    styleUrls: ['./widget-container.component.scss']\n})\nexport class WidgetContainerComponent {\n    @Input()\n    title: string;\n    @Input()\n    icon: string;\n\n    @ViewChild('container', { read: ViewContainerRef,  static: true })\n    embeddedContainer: ViewContainerRef;\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SERVER_API_URL_CONFIG, ServerApiUrlConfig } from '@lamis/web-core';\n\n@Injectable({providedIn:'root'})\nexport class ObservationService {\n    resourceUrl: string = '';\n\n    constructor(private http: HttpClient, @Inject(SERVER_API_URL_CONFIG) private serverUrl: ServerApiUrlConfig) {\n        this.resourceUrl = serverUrl.SERVER_API_URL + '/api';\n    }\n\n    deleteObservation(path: string, id: string) {\n        return this.http.delete(`${this.resourceUrl}/${path}/${id}`, {observe: 'response'})\n    }\n\n    getObservation(path: string, id: string) {\n        return this.http.get<any>(`${this.resourceUrl}/${path}/by-uuid/${id}`,{observe: 'response'})\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { PatientService, PatientTimeline } from '../services/patient.service';\nimport { Router } from '@angular/router';\nimport { TdDialogService } from '@covalent/core';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { ObservationService } from '../services/observation.service';\n\n@Component({\n    selector: 'patient-timeline',\n    templateUrl: './timeline.component.html'\n})\nexport class TimelineComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n    detailed: boolean = false;\n    timeLine: PatientTimeline[];\n\n    constructor(private patientService: PatientService, private router: Router, private observationService: ObservationService,\n                private _dialogService: TdDialogService, private notificationService: NotificationService) {\n    }\n\n    ngOnInit(): void {\n        this.loadActivities()\n    }\n\n    view(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'view'])\n    }\n\n    edit(path: string, id: string) {\n        this.router.navigate(['/', path, id, 'patient', this.patientUuid, 'edit'])\n    }\n\n    delete(path: string, id: string) {\n        this._dialogService.openConfirm({\n            title: 'Confirm',\n            message: 'Do you want to delete this event, action cannot be reversed?',\n            cancelButton: 'No',\n            acceptButton: 'Yes',\n            width: '500px',\n        }).afterClosed().subscribe((accept: boolean) => {\n            if (accept) {\n                this.observationService.getObservation(path, id).subscribe(obj => {\n                    if (obj.body) {\n                        this.observationService.deleteObservation(path, obj.body.id).subscribe((res) => {\n                            if (res.ok) {\n                                this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n                            } else {\n                                this.notificationService.showError('Error deleting event, please try again')\n                            }\n                        })\n                    }\n                })\n            } else {\n                // DO SOMETHING ELSE\n            }\n        });\n    }\n\n    loadActivities() {\n        this.patientService.activities(this.patientId, this.detailed).subscribe((res) => this.timeLine = res)\n    }\n}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'timeline',\n    templateUrl: './timeline.widget.html'\n})\nexport class TimelineWidget implements OnInit{\n    ngOnInit(): void {\n    }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\n\n@Component({\n    selector: 'timeline-event',\n    templateUrl: './timeline.event.html'\n})\nexport class TimelineEvent implements OnInit {\n\n    oddClass;\n    evenClass;\n    _side: string = 'left';\n    @Input()\n    set side(side: string) {\n        this._side = side;\n        this.updateRowClasses(this._side);\n    }\n    \n    constructor(private parent: TimelineWidget) {\n    }\n\n    ngOnInit(): void {\n        this.updateRowClasses(this._side);\n    }\n\n    checkClass(side, leftSide) {\n        let leftClass = '';\n        let rightClass = 'timeline-inverted';\n\n        if (side === 'left' || (!side && leftSide === true)) {\n            return leftClass;\n        } else if ((side === 'alternate' || !side) && leftSide === false) {\n            return rightClass;\n        } else if (side === 'right') {\n            return rightClass;\n        } else {\n            return leftClass;\n        }\n    }\n\n    updateRowClasses(value) {\n        this.oddClass = this.checkClass(value, true);\n        this.evenClass = this.checkClass(value, false);\n    }\n}\n","import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-badge',\n    template: `\n        <div class='timeline-badge'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineBadge {\n    constructor(private event: TimelineEvent) {\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-footer',\n    template: `\n        <div class='timeline-footer'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineFooter {\n    \n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'timeline-header',\n    template: `\n        <div class='timeline-header'>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class TimelineHeader {\n\n}\n","import { Component } from '@angular/core';\nimport { TimelineEvent } from './timeline.event';\n\n@Component({\n    selector: 'timeline-panel',\n    template:\n            `\n        <div class='timeline-panel'>\n            <ng-content></ng-content>\n        </div>`\n})\nexport class TimelinePanel {\n    constructor(private event: TimelineEvent) {\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { TimelineWidget } from './timeline.widget';\nimport { TimelineEvent } from './timeline.event';\nimport { TimelineBadge } from './timeline.badge';\nimport { TimelineFooter } from './timeline.footer';\nimport { TimelineHeader } from './timeline.header';\nimport { TimelinePanel } from './timeline.panel';\n\nconst COMPONENTS = [TimelineBadge, TimelineEvent, TimelineFooter, TimelineHeader, TimelinePanel, TimelineWidget];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS\n    ],\n    exports: [\n        ...COMPONENTS\n    ]\n})\nexport class TimelineWidgetModule {\n\n}\n","import { AbstractControl, AsyncValidator, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport { Directive } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { Observable, of } from 'rxjs';\nimport { debounceTime, switchMap, take } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uniqueHospitalNum]',\n    providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: UniqueHospitalNumValidator,\n        multi: true\n    }]\n})\nexport class UniqueHospitalNumValidator implements AsyncValidator {\n    constructor(private patientService: PatientService) {\n    }\n\n    validate(control: AbstractControl): Observable<ValidationErrors | null> {\n        return control.valueChanges\n            .pipe(\n                debounceTime(300),\n                take(1),\n                switchMap(value => this.patientService.existsByHospitalNumber(value))\n            );\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewFloatItemModel,\n    CardViewIntItemModel,\n    CardViewItem,\n    CardViewTextItemModel\n} from '@alfresco/adf-core';\nimport { FieldType } from '@lamis/web-core';\nimport { PatientService } from '../services/patient.service';\nimport * as moment_ from 'moment';\n\nconst moment = moment_;\n\nexport interface Summary {\n    header?: string;\n    headerClass?: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    type: FieldType;\n    label: string;\n    value: any;\n}\n\n@Component({\n    selector: 'patient-summary-widget',\n    templateUrl: './summary.widget.component.html'\n})\nexport class SummaryWidgetComponent implements OnInit {\n    @Input()\n    patientId: number;\n    @Input()\n    patientUuid: string;\n    @Input()\n\n    summaries: Summary[];\n\n    constructor(private patientService: PatientService) {\n    }\n\n    ngOnInit(): void {\n        this.patientService.getSummaryForPatient(this.patientId).subscribe(res => this.summaries = res)\n    }\n\n    public propertiesForSummary(summary: Summary): Array<CardViewItem> {\n        const properties = [];\n        for (const field of summary.fields) {\n            const dataType = field.type.toLowerCase();\n            let item: CardViewItem;\n            switch (dataType) {\n                case FieldType.boolean:\n                    item = new CardViewBoolItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label\n                    });\n                    break;\n                case FieldType.int:\n                    item = new CardViewIntItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.float:\n                    item = new CardViewFloatItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n                    break;\n                case FieldType.date:\n                    item = new CardViewDateItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy'\n                    });\n                    break;\n                case FieldType.datetime:\n                    item = new CardViewDatetimeItemModel({\n                        value: field.value ? moment(field.value) : null,\n                        key: '',\n                        label: field.label,\n                        format: 'dd MMM, yyyy HH:mm'\n                    });\n                    break;\n                default:\n                    item = new CardViewTextItemModel({\n                        value: field.value,\n                        key: '',\n                        label: field.label,\n                    });\n            }\n            properties.push(item);\n        }\n        return properties;\n    }\n}\n","import { CoreModule } from '@alfresco/adf-core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatSelectModule,\r\n    MatTabsModule\r\n} from '@angular/material';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CovalentDialogsModule, CovalentMessageModule, CovalentSearchModule } from '@covalent/core';\r\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgJhipsterModule } from 'ng-jhipster';\r\nimport { PatientDetailsComponent } from './components/patient-details.component';\r\nimport { PatientEditComponent } from './components/patient-edit.component';\r\nimport { PatientListComponent } from './components/patient-list.component';\r\nimport { PatientResolve, ROUTES } from './services/patient.route';\r\nimport { WidgetContainerComponent } from './components/widget-container.component';\r\nimport { TimelineComponent } from './components/timeline.component';\r\nimport { TimelineWidgetModule } from './widget/timeline.widget.module';\r\nimport { MatFormioModule } from 'angular-material-formio';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UniqueHospitalNumValidator } from './components/unique-hospital-num.validator';\r\nimport { CustomFormsModule } from 'ng2-validation';\r\nimport { DetailedTimelineComponent } from './components/detailed.timeline.component';\r\nimport { SummaryWidgetComponent } from './components/summary.widget.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent,\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        DetailedTimelineComponent,\r\n        SummaryWidgetComponent,\r\n        UniqueHospitalNumValidator\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        NgJhipsterModule,\r\n        LamisSharedModule,\r\n        JsonFormModule,\r\n        MatFormioModule,\r\n        MatInputModule,\r\n        MatIconModule,\r\n        MatDividerModule,\r\n        MatCardModule,\r\n        MatSelectModule,\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        RouterModule.forChild(ROUTES),\r\n        MatProgressBarModule,\r\n        CovalentMessageModule,\r\n        MatListModule,\r\n        MatChipsModule,\r\n        CoreModule,\r\n        CovalentDialogsModule,\r\n        CovalentSearchModule,\r\n        NgbPaginationModule,\r\n        TimelineWidgetModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDateFormatModule,\r\n        CustomFormsModule,\r\n        MatAutocompleteModule\r\n    ],\r\n    exports: [\r\n        PatientListComponent,\r\n        PatientDetailsComponent,\r\n        PatientEditComponent\r\n    ],\r\n    entryComponents: [\r\n        WidgetContainerComponent,\r\n        TimelineComponent,\r\n        SummaryWidgetComponent\r\n    ],\r\n    providers: [\r\n        //PatientService,\r\n        //ObservationService,\r\n        PatientResolve\r\n    ]\r\n})\r\nexport class PatientModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../services/patient.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationService } from '@alfresco/adf-core';\nimport { AppLoaderService } from '@lamis/web-core';\nimport { Patient, StatusHistory } from '../model/patient.model';\nimport * as moment_ from 'moment';\nimport { Moment } from 'moment';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst moment = moment_;\n\n@Component({\n    selector: 'client-status',\n    templateUrl: './client-status.component.html'\n})\nexport class ClientStatusComponent implements OnInit {\n    isSaving: boolean;\n    entity: StatusHistory;\n    patient: Patient;\n    status: string;\n    facilities: string[] = [];\n    facilityTransferredTo: string;\n    statusDates: Moment[] = [];\n    today = moment();\n    statuses = ['TRACED_UNABLE_TO_LOCATE', 'TRACED_AGREED_TO_RETURN_TO_CARE', 'DID_NOT_ATTEMPT_TO_TRACE'];\n\n    constructor(private patientService: PatientService, private activatedRoute: ActivatedRoute, private router: Router,\n                private notification: NotificationService, private appLoaderService: AppLoaderService) {\n    }\n\n    createEntity(): StatusHistory {\n        return <StatusHistory>{};\n    }\n\n    ngOnInit(): void {\n        this.isSaving = false;\n        this.patientService.getActiveFacility().subscribe(fac => {\n            this.patientService.getAllFacility().subscribe(res => {\n                this.facilities = res.map(f => f.name).filter(f => f != fac.name);\n            });\n        });\n        this.activatedRoute.data.subscribe(({entity}) => {\n            this.entity = !!entity && entity.body ? entity.body : entity;\n            if (this.entity === undefined) {\n                this.entity = this.createEntity();\n            }\n            const patientId = this.activatedRoute.snapshot.paramMap.get('patientId');\n            this.patientService.findByUuid(patientId).subscribe((res) => {\n                this.entity.patient = res.body;\n                this.patient = res.body;\n                this.entity.facility = res.body.facility;\n                this.patientService.getStatusDatesByPatient(res.body.id).subscribe((res) => {\n                    this.statusDates = res;\n                });\n            });\n\n            if (this.entity.id) {\n                this.patientService.getStatusName(this.entity.id).subscribe(res => this.status = res);\n\n                if (this.entity && this.entity.extra) {\n                    this.facilityTransferredTo = this.entity.extra.facilityTransferredTo;\n                }\n            }\n        });\n    }\n\n    change(input: string) {\n        if (input) {\n            this.facilities = this.facilities.filter(f => f.toLowerCase().includes(input.toLowerCase()))\n        }\n    }\n\n    filterDates(date: Moment): boolean {\n        let exists = false;\n\n        this.statusDates.forEach(d => {\n            if (date.diff(d, 'days') === 0) {\n                exists = true;\n            }\n        });\n        return (this.entity.id && date.diff(this.entity.dateStatus, 'days') === 0) || !exists;\n    }\n\n    previousState() {\n        window.history.back();\n    }\n\n    save() {\n        this.appLoaderService.open('Saving Client status update...');\n        this.isSaving = true;\n        if (!this.entity.extra) {\n            this.entity.extra = {}\n        }\n        this.entity.extra.facilityTransferredTo = this.facilityTransferredTo;\n\n        if (this.statuses.includes(this.entity.status)) {\n            this.entity.outcome = this.entity.status;\n            this.entity.status = null;\n        }\n        if (this.entity.id !== undefined) {\n            this.subscribeToSaveResponse(this.patientService.updateClientStatus(this.entity));\n        } else {\n            this.subscribeToSaveResponse(this.patientService.saveClientStatus(this.entity));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<any>>) {\n        result.subscribe(\n            (res: HttpResponse<any>) => this.onSaveSuccess(res.body),\n            (res: HttpErrorResponse) => {\n                this.appLoaderService.close();\n                this.onSaveError();\n                this.onError(res.message)\n            });\n    }\n\n    private onSaveSuccess(result: any) {\n        this.appLoaderService.close();\n        this.isSaving = false;\n        this.notification.showInfo('Client status update successfully saved');\n        this.previousState();\n    }\n\n    private onSaveError() {\n        this.isSaving = false;\n        this.notification.showError('Error saving status update');\n    }\n\n    protected onError(errorMessage: string) {\n        this.isSaving = false;\n        this.notification.showError(errorMessage);\n    }\n}\n","import { ClientStatusComponent } from '../components/client-status.component';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, Routes } from '@angular/router';\nimport { StatusHistory } from '../model/patient.model';\nimport { PatientService } from './patient.service';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class StatusResolve implements Resolve<StatusHistory> {\n    constructor(private service: PatientService) {\n    }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<StatusHistory> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.findClientStatus(id).pipe(\n                filter((response: HttpResponse<StatusHistory>) => response.ok),\n                map((patient: HttpResponse<StatusHistory>) => patient.body)\n            );\n        }\n        return of(<StatusHistory>{});\n    }\n}\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        data: {\n            title: 'Clinic Visit',\n            breadcrumb: 'CLINIC VISIT'\n        },\n        children: [\n            {\n                path: 'patient/:patientId/new',\n                component: ClientStatusComponent,\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Update Client Status',\n                    breadcrumb: 'UPDATE CLIENT STATUS'\n                },\n                //canActivate: [UserRouteAccessService]\n            },\n            {\n                path: ':id/patient/:patientId/edit',\n                component: ClientStatusComponent,\n                resolve: {\n                    entity: StatusResolve\n                },\n                data: {\n                    authorities: ['ROLE_DEC'],\n                    title: 'Client Status Edit',\n                    breadcrumb: 'CLIENT STATUS EDIT'\n                },\n                //canActivate: [UserRouteAccessService]\n            }\n        ]\n    }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CovalentDialogsModule } from '@covalent/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { JsonFormModule, LamisSharedModule, MatDateFormatModule } from '@lamis/web-core';\nimport { MatFormioModule } from 'angular-material-formio';\nimport { RouterModule } from '@angular/router';\nimport { ROUTES, StatusResolve } from './services/status.route';\nimport {\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressBarModule,\n    MatSelectModule,\n    MatTabsModule\n} from '@angular/material';\nimport { ClientStatusComponent } from './components/client-status.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CovalentDialogsModule,\n        LamisSharedModule,\n        JsonFormModule,\n        MatFormioModule,\n        MatInputModule,\n        MatIconModule,\n        MatDividerModule,\n        MatCardModule,\n        MatSelectModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n        MatProgressBarModule,\n        CoreModule,\n        MatDateFormatModule\n    ],\n    declarations: [\n        ClientStatusComponent\n    ],\n    exports: [\n        ClientStatusComponent\n    ],\n    providers: [\n        StatusResolve\n    ]\n})\nexport class ClientStatusModule {\n\n}\n"]}